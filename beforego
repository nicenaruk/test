using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using StdDataModel.Entities;
using System.Data.Entity;
using System.Configuration;
using DataLib;
using System.Data;
using StdDataModel.AssignCommittee;
using Newtonsoft.Json.Linq;
using System.util;
using Newtonsoft.Json;
using System.Web.Http.Results;

namespace ApiRepos
{
    public class ReturnMessage
    {
        public int Type { get; set; }
        public string Text { get; set; }
    }
    public class FlowStatus
    {
        public int Submit { get; set; }
        public int StateId { get; set; }
        public IList<ReturnMessage> Messages { get; set; } = new List<ReturnMessage>();
        public string all_result { get; set; }
        public string manual_note { get; set; }
    }
    public enum FlowPreactionType
    {
        CheckOut,
        Checkin
    }
    public class BeforeGo
    {
        private readonly BaacDbContext db;
        private readonly Auth auth;
        private readonly Portfolio portfolio;
        private readonly CommonFlow commonFlow;
        private readonly AutoAssign autoAssign;
        public BeforeGo(BaacDbContext db, Auth auth)
        {
            this.db = db;
            this.auth = auth;
            this.portfolio = new Portfolio(db, auth);
            this.commonFlow = new CommonFlow(this.db, this.auth);
            this.autoAssign = new AutoAssign(db, this, auth);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="token_id">APP_USER_ACTIVE.RUNNGING_ID</param>
        /// <param name="doc_id">AAG_REQUEST.REQUEST_ID</param>
        /// <param name="fromState">BPM_STATE.STATE_ID</param>
        /// <param name="toStates">BPM_STATE.STATE_ID</param>
        /// <param name="actor">APP_ROLES.ACTOR</param>
        /// <returns></returns>
        ///

        public string GetSub(int HEAD_COL_TYPE_ID, int SUB_COL_ID, string subColType)
        {
            var colType = db.APP_MASTER.FirstOrDefault(s => s.L_ID == HEAD_COL_TYPE_ID)?.L_NAME;
            switch (HEAD_COL_TYPE_ID)
            {
                case 285003:
                    {
                        var land = db.AAG_COL_LAND.Where(x => x.SUB_COL_ID == SUB_COL_ID).FirstOrDefault();
                        var dsca = db.APP_MASTER.FirstOrDefault(m => m.L_ID == land.COL_CERT_TYPE_ID)?.L_NAME;
                        var dscb = land.COL_CERT_NO;
                        return $"{colType} ประเภทและเลขที่เอกสารสิทธิ : {dsca} {dscb}";
                    }
                case 285006:
                    {
                        if (subColType == "L")
                        {
                            var sub = db.AAG_COL_LAND.Where(s => s.SUB_COL_ID == SUB_COL_ID).FirstOrDefault();
                            var dsca = db.APP_MASTER.FirstOrDefault(m => m.L_ID == sub.COL_CERT_TYPE_ID)?.L_NAME;
                            var dscb = sub.COL_CERT_NO;
                            return $"{colType}(ที่ดิน) ประเภทและเลขที่เอกสารสิทธิ : {dsca} {dscb}";
                        }
                        else if (subColType == "B")
                        {
                            var sub = db.AAG_COL_BUILD.Where(s => s.SUB_COL_ID == SUB_COL_ID).FirstOrDefault();
                            var dsca = db.APP_MASTER.FirstOrDefault(m => m.L_ID == sub.BUILD_TYPE_CBS)?.L_NAME;
                            var dscb = sub.LOC_ADD_NO;
                            return $"{colType}(สิ่งปลูกสร้าง) ประเภทและเลขที่สิ่งปลูกสร้าง : {dsca} {dscb}";
                        }
                    }
                    break;
                case 285066:
                    {
                        var sub = db.AAG_COL_CONDO.FirstOrDefault(s => s.SUB_COL_ID == SUB_COL_ID);
                        var dsca = db.APP_MASTER.FirstOrDefault(m => m.L_ID == sub.ROOM_TYPE)?.L_NAME;
                        var dscb = sub.ROOM_NO;
                        return $"{colType} ประเภทและเลขที่ห้องชุด : {dsca} {dscb}";
                    }
                case 285011:
                    {
                        var sub = db.AAG_COL_MACHINE.FirstOrDefault(s => s.SUB_COL_ID == SUB_COL_ID);
                        //var dsca = db.APP_MASTER.FirstOrDefault(m => m.L_ID == sub.MACHINE_TYPE)?.L_NAME
                        var dscb = sub?.REGIS_NO_FROM;
                        if (sub != null)
                        {
                            if (!string.IsNullOrEmpty(sub.REGIS_NO_TO))
                            {
                                dscb += " ถึง " + sub.REGIS_NO_TO;
                            }
                            if (!string.IsNullOrEmpty(sub.SERIAL_NO))
                            {
                                dscb += " Serial " + sub.SERIAL_NO;
                            }
                        }
                        return $"{colType} ชื่อและเลขทะเบียน : {sub?.MACHINE_NAME} {dscb}";
                    }
                case 285008:
                    {
                        var sub = db.AAG_COL_TREE.FirstOrDefault(s => s.SUB_COL_ID == SUB_COL_ID);
                        var m = sub != null ? db.APP_MASTER.FirstOrDefault(s => s.L_ID == sub.TREE_ID) : null;
                        return $"{colType} กลุ่มและชนิดพรรณไม้ : {m?.L_NAME2} {m?.L_NAME}";
                    }
            }
            return "";
        }

        public async Task PortfolioValidate(FlowPreactionType flowPreactionType, AAG_REQUEST request, int fromState, IList<int> toState, string actionType, Action<string> error, Action<string> warning)
        {
            var masterRequest = this.db.AAG_REQUEST.FirstOrDefault(s => s.REQUEST_ID == request.REQUEST_PORTFOLIO_REF_ID);

            int currentState = toState[0];
            var mainAction = this.db.BPM_STATE.FirstOrDefault(s => s.STATE_ID == currentState);
            var subRequest = (from req in this.db.AAG_REQUEST
                              join act in this.db.BPM_ACTION on req.ACTION_ID equals act.ACTION_ID
                              where req.REQUEST_PORTFOLIO_REF_ID == request.REQUEST_PORTFOLIO_REF_ID
                              && req.REQUEST_ID != request.REQUEST_PORTFOLIO_REF_ID
                              select req
                                      ).ToList();
            toState.Add(999);
            var action_name = mainAction.STATE_NAME != null ? mainAction.STATE_NAME : string.Empty;
            var action_type = actionType.Substring(0, 1).ToUpper();
            var action = new
            {
                type = actionType,
                states = toState,
                name = action_name,
            };

            string caseFlow = string.Empty;
            if (toState[0] >= fromState)
            {
                caseFlow = "F";
            }
            else
            {
                caseFlow = "B";
                if (actionType == "submit")
                {
                    caseFlow = "X";
                }
            }
            bool isPortfolioMaster = false;
            isPortfolioMaster = request.REQUEST_PORTFOLIO_REF_ID != null && request.REQUEST_ID == request.REQUEST_PORTFOLIO_REF_ID;
            using (var trx = this.db.Database.BeginTransaction())
            {
                try
                {
                    if (!isPortfolioMaster)
                    {
                        if (caseFlow == "F")
                        {
                            error("ไม่สามารถส่งสรุปประเมินราคาได้เนื่องจากเป็น SUB");
                        }
                        else if (caseFlow == "X" || (caseFlow == "B" && (fromState == 41 || fromState == 42)))
                        {
                            error("ส่งกลับได้เฉพาะใบคำขอที่เป็นใบ Main");
                        }
                        else if (caseFlow == "B")
                        {
                            error("ส่งกลับได้เฉพาะใบคำขอที่เป็นใบ Main");
                        }
                    }
                    else
                    {
                        // CASE VALIDATE ON MASTER
                        if (caseFlow == "F")
                        {
                            switch (fromState)
                            {
                                case 32:
                                    warning("จะส่งไปรอสรุปราคาทุกใบคำขอใน portfolio");
                                    //Copy
                                    if (flowPreactionType == FlowPreactionType.CheckOut)
                                    {
                                        using (var portDbContext = new BaacDbContext())
                                        {
                                            Portfolio port = new Portfolio(portDbContext, this.auth);
                                            using (var portTrx = portDbContext.Database.BeginTransaction())
                                            {
                                                try
                                                {
                                                    if (!await port.CopyPortfolio(masterRequest.REQUEST_ID))
                                                    {
                                                        error("ไม่สามารถคัดลอก Portfolio บางใบคำขอ ใน Portfolio");
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        portTrx.Commit();
                                                    }
                                                }
                                                catch
                                                {
                                                    portTrx.Rollback();
                                                    error("ไม่ผ่านการ Validate บางใบคำขอ ใน Portfolio");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case 33:
                                    warning("จะส่งไปหากรรมการทุกใบคำขอใน portfolio");
                                    break;
                            }
                            // CASE FORWARD ต้องมี VALIDATE DATA และ COPY DATA ด้วย รอคอนเฟิม DATA
                            // SOLUTION 3
                            

                            foreach (var sub in subRequest)
                            {
                                // MOCKUP VALIDATE step PreAction Validate Same OLD LOGIC
                                if (flowPreactionType == FlowPreactionType.CheckOut)
                                {
                                    JToken result = null;
                                    var subLastAction = await this.db.BPM_ACTION.FirstOrDefaultAsync(s => s.ACTION_ID == request.ACTION_ID);
                                    var flowStatus = await CheckOut(this.auth.UserInfo.RUNNING_ID, sub.REQUEST_ID, action.type, subLastAction.STATE_ID ?? 0, action.states, this.auth.UserInfo.ACTOR ?? 0);
                                    result = JObject.FromObject(flowStatus);
                                    var passValidate = result["Submit"]?.Value<int?>() == 1;
                                    if (!passValidate)
                                    {
                                        string subErrorMsg = $"{sub.REQUEST_NO} : ";
                                        subErrorMsg += string.Join(", ", flowStatus.Messages.Select(message => message.Text));
                                        error(subErrorMsg);
                                        continue;
                                    }
                                }
                                else if (flowPreactionType == FlowPreactionType.Checkin)
                                {
                                    var lastAction = await this.db.BPM_ACTION.FirstOrDefaultAsync(s => s.ACTION_ID == sub.ACTION_ID);
                                    var result = await this.CheckIn(this.auth.UserInfo.RUNNING_ID, sub.REQUEST_ID, actionType, lastAction.STATE_ID ?? 0, toState, this.auth.UserInfo.ACTOR ?? 0);
                                    var state = await this.db.BPM_STATE.FirstOrDefaultAsync(s => s.STATE_ID == result.StateId);
                                    var flowStatus = new List<FlowStatus>();
                                    if (result.Submit == 1)
                                    {
                                        var newAction = setSubRequestNewAction(sub, lastAction, result.StateId, state.STEP_ID, action_type, action_name);
                                        if (newAction != null)
                                        {
                                            this.db.BPM_ACTION.Add(newAction);

                                            await this.db.SaveChangesAsync();

                                            sub.ACTION_ID = newAction.ACTION_ID;

                                            await this.db.SaveChangesAsync();
                                        }

                                    }
                                    else
                                    {
                                        trx.Rollback();
                                        error("ไม่ผ่านการ Validate บางใบคำขอ ใน Portfolio");
                                        return;
                                    }
                                }
                            }

                        }
                        else if (caseFlow == "X" || (caseFlow == "B" && (fromState == 41 || fromState == 42)))
                        {
                            // case 33 ย้อนกลับแก้ไข || ส่งคืน 
                            warning("ต้องการย้อนกลับเพื่อแก้ไขทุกใบงานที่อยู่ใน portfolio");

                            if (fromState == 41 || fromState == 42)
                            {
                                bool allSubRequestInCase4142 = subRequest.Any(s =>
                                {
                                    var state = this.db.BPM_ACTION.FirstOrDefault(a => a.ACTION_ID == s.ACTION_ID).STATE_ID;
                                    return state != null && (state == 41 || state == 42);
                                }
                                );
                                if (!allSubRequestInCase4142)
                                {
                                    error("ถ้ามีใบคำขอใดไม่อยู่ใน Role กรรมการรับราคา แจ้ง error ไม่ไห้ส่งกลับ");
                                }
                            }

                            if (flowPreactionType == FlowPreactionType.Checkin)
                            {
                                foreach (var sub in subRequest)
                                {
                                    var lastAction = await this.db.BPM_ACTION.FirstOrDefaultAsync(s => s.ACTION_ID == sub.ACTION_ID);
                                    var state = await this.db.BPM_STATE.FirstOrDefaultAsync(s => s.STATE_ID == currentState);
                                    var newAction = setSubRequestNewAction(sub, lastAction, currentState, state.STEP_ID, action_type, action_name);
                                    if (newAction != null)
                                    {
                                        this.db.BPM_ACTION.Add(newAction);

                                        await this.db.SaveChangesAsync();

                                        sub.ACTION_ID = newAction.ACTION_ID;

                                        await this.db.SaveChangesAsync();
                                    }
                                }
                            }
                        }
                        else if (caseFlow == "B")
                        {
                            error("ใบคำขอประเภท Portfolio ไม่สามารถส่งกลับได้");
                        }
                    }
                    trx.Commit();
                }
                catch (Exception msg)
                {
                    error(msg.Message);
                    trx.Rollback();
                    throw;
                }
            }
        }

        public BPM_ACTION setSubRequestNewAction(AAG_REQUEST sub, BPM_ACTION lastAction, int toStateID, int? stepID, string action_type, string action_name)
        {
            BPM_ACTION newAction = null;
            newAction = new BPM_ACTION()
            {
                REQUEST_ID = sub.REQUEST_ID,
                STATE_ID = toStateID,
                FROM_STATE_ID = lastAction.STATE_ID,
                ACTION_TIME = DateTime.Now,
                ACTION_TYPE = action_type,
                ACTION_TEXT = action_name,
                STEP_ID = stepID,
                USER_NAME = this.auth.UserInfo.USER_NAME,
                REASON_ID = null,
                REASON_TEXT = null,
                NOTE = null,
                ACTOR = this.auth.UserInfo.ACTOR,
                ORG_ID = this.auth.UserInfo.ORG_ID > 0 ? this.auth.UserInfo.ORG_ID : this.commonFlow.GetOrgID(this.auth.UserInfo.USER_NAME),
                ORG_NAME = this.commonFlow.GetOrgName(this.auth.UserInfo.ORG_ID > 0 ? this.auth.UserInfo.ORG_ID : this.commonFlow.GetOrgID(this.auth.UserInfo.USER_NAME))
            };

            return newAction;
        }

        public async Task<FlowStatus> CheckOut(int token_id, int doc_id, string actionType, int fromState, IList<int> toStates, int actor)
        {
            return await FromState(FlowPreactionType.CheckOut, token_id, doc_id, actionType, fromState, toStates, actor);
        }

        public async Task<FlowStatus> CheckIn(int token_id, int doc_id, string actionType, int fromState, IList<int> toStates, int actor)
        {
            return await FromState(FlowPreactionType.Checkin, token_id, doc_id, actionType, fromState, toStates, actor);
        }

        public async Task<FlowStatus> FromState(FlowPreactionType flowPreactionType, int token_id, int doc_id, string actionType, int fromState, IList<int> toStates, int actor)
        {
            var rms = new FlowStatus() { Submit = 1, StateId = toStates[0] };

            var request = db.AAG_REQUEST.FirstOrDefault(s => s.REQUEST_ID == doc_id);

            void error(string msg)
            {
                rms.Messages.Add(new ReturnMessage() { Type = 3, Text = msg });
                rms.Submit = 0;
            }

            void warning(string msg)
            {
                rms.Messages.Add(new ReturnMessage() { Type = 3, Text = msg });
                rms.Submit = 1;
            }

            switch (actionType)
            {
                case "return":
                    {
                        switch (fromState)
                        {
                            case 31:
                            case 32:
                            case 33:
                                if(request != null)
                                {
                                    if (request.REQUEST_PORTFOLIO_REF_ID != null && !toStates.Contains(999))
                                    {
                                        await PortfolioValidate(flowPreactionType, request, fromState, toStates, actionType, error, warning);
                                    }

                                    var newOrg = await this.db.APP_M_ORG_NEW.Where(o => o.ORG_ID == request.APPRAI_ORG_ID).FirstOrDefaultAsync();
                                    if (newOrg != null && newOrg.ORG_PID != null)
                                    {
                                        request.DISPATCH_ORG_ID = newOrg.ORG_PID;
                                    }
                                    else
                                    {
                                        request.DISPATCH_ORG_ID = request.APPRAI_ORG_ID;
                                    }
                                    request.ROLE_2_INBOX = DateTime.Now;
                                    if (request.EXTERNAL_METHOD >= 3) { request.EXTERNAL_METHOD = null; }
                                }
                                break;
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                                {
                                    if (request.REQUEST_PORTFOLIO_REF_ID != null && !toStates.Contains(999))
                                    {
                                        await PortfolioValidate(flowPreactionType, request, fromState, toStates, actionType, error, warning);
                                    }
                                    var usr = await db.APP_USER_ACTIVE.Where(s => s.RUNNING_ID == token_id).FirstOrDefaultAsync();

                                    var rol = await db.APP_ROLES.Where(s => s.ROLE_ID == usr.ROLE_ID).FirstOrDefaultAsync();

                                    var req = await db.AAG_REQUEST.Where(s => s.REQUEST_ID == doc_id).FirstOrDefaultAsync();

                                    var act = await db.BPM_ACTION.Where(s => s.ACTION_ID == req.ACTION_ID).FirstOrDefaultAsync();

                                    if (rol.ACTOR != 1)
                                    {
                                        error("เป็นสิทธิของผู้อนุมัติคนที่ 1 เท่านั้น");
                                    }
                                    request.ROLE_3_INBOX = DateTime.Now;
                                }
                                break;
                            case 51:
                            case 52:
                            case 53:
                            case 55:
                            case 56:
                            case 57:
                            case 59:
                            case 66:
                            case 67:
                            case 69:
                                if (request != null)
                                {
                                    request.ROLE_4_INBOX = null;
                                }
                                break;
                        }
                    }
                    break;

                case "cancel":
                    {
                        if (flowPreactionType == FlowPreactionType.Checkin)
                        {
                            var usr = await db.APP_USER_ACTIVE.Where(s => s.RUNNING_ID == token_id).FirstOrDefaultAsync();

                            var req = await db.AAG_REQUEST.Where(s => s.REQUEST_ID == doc_id).FirstOrDefaultAsync();

                            var act = await db.BPM_ACTION.Where(s => s.ACTION_ID == req.ACTION_ID).FirstOrDefaultAsync();

                            var owner = await db.BPM_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID == 100).FirstOrDefaultAsync();
                            if (owner == null)
                            {
                                owner = new BPM_OWNER()
                                {
                                    REQUEST_ID = req.REQUEST_ID,
                                    STEP_ID = 100,
                                    FROM_USER = act.FULL_NAME,
                                    C_BY = usr.USER_NAME,
                                    C_DATE = DateTime.Now
                                };
                                db.BPM_OWNER.Add(owner);
                            }
                            else
                            {
                                owner.E_BY = usr.USER_NAME;
                                owner.E_DATE = DateTime.Now;
                            }
                            owner.ORG_ID = usr.ORG_ID;
                            owner.USER_NAME = usr.USER_NAME;
                        }
                    }
                    break;
                case "submit":
                    {
                        if (toStates.Count(s => s > fromState) == 0)
                        {
                            // case portfolio 33 => 32 ย้อนกลับเพื่อแก้ไข
                            if (request.REQUEST_PORTFOLIO_REF_ID != null && !toStates.Contains(999))
                            {
                                await PortfolioValidate(flowPreactionType, request, fromState, toStates, actionType, error, warning);
                            }
                            break;
                        }

                        var usr = await db.APP_USER_ACTIVE.Where(s => s.RUNNING_ID == token_id).FirstOrDefaultAsync();

                        var rol = await db.APP_ROLES.Where(s => s.ROLE_ID == usr.ROLE_ID).FirstOrDefaultAsync();

                        var req = await db.AAG_REQUEST.Where(s => s.REQUEST_ID == doc_id).FirstOrDefaultAsync();

                        var act = await db.BPM_ACTION.Where(s => s.ACTION_ID == req.ACTION_ID).FirstOrDefaultAsync();

                        var lender = await db.AAG_REQUEST_OWNER.FirstOrDefaultAsync(s => s.REQUEST_ID == req.REQUEST_ID && s.OWNER_TYPE == 1);

                        var mortgagers = await db.AAG_REQUEST_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.OWNER_TYPE == 2).ToListAsync();

                        //async void updateRequest()
                        //{ //
                        //    var head = await db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID).OrderBy(s => s.HEAD_COL_ID).FirstOrDefaultAsync()
                        //    NOSONAR if (head != null)
                        //    { //
                        //        req.COL_TYPE = head.HEAD_COL_TYPE_ID
                        //        req.COL_PROVINCE = head.LOC_PROVINCE_CODE
                        //        req.COL_DISTRICT = head.LOC_DISTRICT_CODE
                        //        req.COL_SUBDISTRICT = head.LOC_SUBDISTRICT_CODE
                        //    } //
                        //} //

                        async Task<BPM_OWNER> setOwner(int stepId, int? orgId, string userName = null)
                        {
                            var owner = await db.BPM_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID == stepId).FirstOrDefaultAsync();
                            if (owner == null)
                            {
                                owner = new BPM_OWNER()
                                {
                                    REQUEST_ID = req.REQUEST_ID,
                                    STEP_ID = stepId,
                                    FROM_USER = act.FULL_NAME,
                                    C_BY = usr.USER_NAME,
                                    C_DATE = DateTime.Now
                                };
                                db.BPM_OWNER.Add(owner);
                            }
                            else
                            {
                                owner.E_BY = usr.USER_NAME;
                                owner.E_DATE = DateTime.Now;
                            }
                            owner.ORG_ID = orgId;
                            owner.USER_NAME = userName;
                            return owner;
                        }

                        void addColAmount(int headColId, int subColId, string subColType, string subColDsca)
                        {
                            db.AAG_COL_AMOUNT.Add(new AAG_COL_AMOUNT()
                            {
                                REQUEST_ID = req.REQUEST_ID,
                                HEAD_COL_ID = headColId,
                                SUB_COL_ID = subColId,
                                SUB_COL_TYPE = subColType,
                                SUB_COL_DSCA = subColDsca,
                                APPRAI_TYPE = req.APPRAI_TYPE,
                                C_BY = usr.USER_NAME,
                                C_DATE = DateTime.Now
                            });
                        }

                        //void addColApprai(int headColId, int subColId, string subColType, string method, decimal? amount = 0)
                        //{ //
                        //    db.AAG_COL_APPRAI.Add(new AAG_COL_APPRAI()
                        //    { //
                        //        REQUEST_ID = req.REQUEST_ID,
                        //        HEAD_COL_ID = headColId,
                        //        SUB_COL_ID = subColId,
                        //        SUB_COL_TYPE = subColType,
                        //        APPRAI_METHOD = method,
                        //        APPRAI_AMOUNT = amount,
                        //        C_BY = usr.USER_NAME,
                        //        C_DATE = DateTime.Now
                        //    })
                        //} //

                        void addColApprove(int reqActor)
                        {
                            db.AAG_COL_APPROVE.RemoveRange(db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID));

                            foreach (var item in db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                            {
                                for (var i = 0; i < reqActor; i++)
                                {
                                    db.AAG_COL_APPROVE.Add(new AAG_COL_APPROVE()
                                    {
                                        REQUEST_ID = item.REQUEST_ID,
                                        HEAD_COL_ID = item.HEAD_COL_ID,
                                        SUB_COL_ID = item.SUB_COL_ID,
                                        SUB_COL_TYPE = item.SUB_COL_TYPE,
                                        ACTOR = i + 1
                                    });
                                }
                            }
                        }

                        int colDupCount()
                        {
                            var cnt = 0;

                            switch (req.COL_TYPE)
                            {
                                case 285008:
                                case 285003:
                                    {
                                        var x = (from s in db.AAG_COL_LAND
                                                 join h in db.AAG_HEAD_COL on s.HEAD_COL_ID equals h.HEAD_COL_ID
                                                 join r in db.AAG_REQUEST on h.REQUEST_ID equals r.REQUEST_ID
                                                 where r.REQUEST_ID == req.REQUEST_ID
                                                 select new
                                                 {
                                                     s.COL_CERT_TYPE_ID,
                                                     s.COL_CERT_NO,
                                                     h.LOC_DISTRICT_CODE,
                                                     h.LOC_PROVINCE_CODE
                                                 }).ToList();
                                        cnt = x.Count - x.Distinct().Count();
                                    }
                                    break;
                                case 285011:
                                    {
                                        var x = (from s in db.AAG_COL_MACHINE
                                                 join h in db.AAG_HEAD_COL on s.HEAD_COL_ID equals h.HEAD_COL_ID
                                                 join r in db.AAG_REQUEST on h.REQUEST_ID equals r.REQUEST_ID
                                                 where r.REQUEST_ID == req.REQUEST_ID
                                                 select new
                                                 {
                                                     s.REGIS_NO_FROM,
                                                     s.SERIAL_NO
                                                 }).ToList();
                                        cnt = x.Count - x.Distinct().Count();
                                    }
                                    break;
                                case 285007:
                                    {
                                        var x = (from s in db.AAG_COL_LAND
                                                 join h in db.AAG_HEAD_COL on s.HEAD_COL_ID equals h.HEAD_COL_ID
                                                 join r in db.AAG_REQUEST on h.REQUEST_ID equals r.REQUEST_ID
                                                 where r.REQUEST_ID == req.REQUEST_ID
                                                 select new
                                                 {
                                                     s.COL_CERT_NO,
                                                     h.LOC_DISTRICT_CODE,
                                                     h.LOC_PROVINCE_CODE
                                                 }).ToList();
                                        cnt = x.Count - x.Distinct().Count();
                                    }
                                    break;
                            }
                            return cnt;
                        }

                        async Task<bool> checkForm()
                        {
                            var reqSubBuild = 0;

                            var buildNotInLandDistrict = 0;

                            var cannotMortgage = db.APP_MASTER.FirstOrDefault(s => s.L_TYPE == "CUS_INSOLVENT" && s.L_ID == 217402);

                            if (!string.IsNullOrEmpty(lender.HOUSE_NO) && lender.HOUSE_NO.Length > 10) error("บ้านเลขที่ผู้กู้เกิน 10 ตัวอักษร");

                            foreach (var mortgager in mortgagers)
                            {
                                if (!string.IsNullOrEmpty(mortgager.HOUSE_NO) && mortgager.HOUSE_NO.Length > 10) error("บ้านเลขที่ผู้จำนองเกิน 10 ตัวอักษร");
                            }

                            if (req.CANCEL_DATE != null)
                            {
                                error($"LPS ขอยกเลิกรายการ");
                            }

                            var contact = await db.AAG_REQUEST_CONTACT.FirstOrDefaultAsync(s => s.REQUEST_ID == req.REQUEST_ID && s.FULL_NAME != null && s.PHONE != null);

                            if (contact == null) error("ยังไม่มีรายละเอียดผู้ติดต่อ");

                            var heads = await db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID).OrderBy(s => s.HEAD_COL_ID).ToListAsync();
                            if (heads.Count == 0) error($"ยังไม่มีรายการทรัพย์สิน");
                            else
                            {
                                req.COL_TYPE = heads[0].HEAD_COL_TYPE_ID;
                                req.COL_PROVINCE = heads[0].LOC_PROVINCE_CODE;
                                req.COL_DISTRICT = heads[0].LOC_DISTRICT_CODE;
                                req.COL_SUBDISTRICT = heads[0].LOC_SUBDISTRICT_CODE;
                            }
                            var i = 0;
                            var noSubCol = 0;

                            var land = (from t in db.AAG_COL_LAND
                                        join x in db.AAG_HEAD_COL on t.HEAD_COL_ID equals x.HEAD_COL_ID
                                        where x.REQUEST_ID == req.REQUEST_ID
                                        select t).ToList();

                            if (land.Select(s => s.COL_CERT_TYPE_ID).Distinct().Count() > 1) error("เอกสารสิทธิที่ดินต่างประเภทกัน");

                            if (land.Count(s => s.COL_CERT_TYPE_ID == null) > 0) error("ยังไม่มีประเภทเอกสารสิทธิที่ดิน");

                            foreach (var h in db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID).OrderBy(s => s.HEAD_COL_ID))
                            {
                                if (i == 0)
                                {
                                    req.COL_TYPE = h.HEAD_COL_TYPE_ID;
                                    req.COL_PROVINCE = h.LOC_PROVINCE_CODE;
                                    req.COL_DISTRICT = h.LOC_DISTRICT_CODE;
                                    req.COL_SUBDISTRICT = h.LOC_SUBDISTRICT_CODE;
                                }
                                var subColCount = 0;

                                switch (h.HEAD_COL_TYPE_ID)
                                {
                                    case 285003: subColCount = db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count(); break;
                                    case 285006: reqSubBuild += db.AAG_COL_BUILD.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count(); break;
                                    case 285011: subColCount = db.AAG_COL_MACHINE.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count(); break;
                                    case 285066: subColCount = db.AAG_COL_CONDO.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count(); break;
                                    case 285008: subColCount = db.AAG_COL_TREE.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count(); break;
                                }
                                if (h.HEAD_COL_TYPE_ID != 285006 && subColCount == 0) noSubCol++;
                                i++;

                                switch (h.HEAD_COL_TYPE_ID)
                                {
                                    case 285003:
                                        {
                                            foreach (var sub in db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                                if (sub.LEGAL_MORTGAGE_AREA_WA > sub.AREA_WA) error("เนื้อที่ดินที่จำนองมากกว่าในเอกสารสิทธิ");
                                            }
                                        }
                                        break;
                                    case 285006:
                                        {
                                            foreach (var sub in db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                                if (sub.LEGAL_MORTGAGE_AREA_WA > sub.AREA_WA) error("เนื้อที่ดินที่จำนองมากกว่าในเอกสารสิทธิ");
                                            }
                                            foreach (var sub in db.AAG_COL_BUILD.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                            }
                                        }
                                        break;
                                    case 285066:
                                        {
                                            foreach (var sub in db.AAG_COL_CONDO.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                            }
                                        }
                                        break;
                                    case 285011:
                                        {
                                            foreach (var sub in db.AAG_COL_MACHINE.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                            }
                                        }
                                        break;
                                    case 285008:
                                        {
                                            foreach (var sub in db.AAG_COL_TREE_HEAD.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                var colOwner = db.AAG_COL_OWNER.Where(s => s.L_VALUE == sub.COL_OWNER).ToList();
                                                if (colOwner.Count == 0) error("ยังไม่มีผู้ถือกรรมสิทธิ์");
                                                if (colOwner.Count(s => s.CUS_INSOLVENT == cannotMortgage?.L_ID) > 0)
                                                {
                                                    error($"มีผู้ถือกรรมสิทธิ์ที่{cannotMortgage.L_NAME}");
                                                }
                                            }
                                        }
                                        break;
                                }

                                //if (req.REQUEST_TYPE == 2)
                                //{
                                //    if (String.IsNullOrEmpty(h.CBS_COL_NO) 
                                //        || !h.OLD_APPRAI_AMOUNT.HasValue
                                //        || !h.OLD_APPRAI_DATE.HasValue
                                //        ) error("ทรัพย์สินยังไม่มีข้อมูลหลักประกัน CBS")
                                //}
                            }
                            // NOSONAR if (i == 0) error($"ยังไม่มีรายการทรัพย์สิน") 

                            if (req.COL_TYPE == 285006 && reqSubBuild == 0) noSubCol++;

                            if (noSubCol > 0) error($"ยังมีรายการที่ไม่มีทรัพย์ย่อย");

                            var colProvinces = db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID).Select(s => new { s.LOC_PROVINCE_CODE, s.LOC_DISTRICT_CODE }).Distinct();

                            if (colProvinces.Count() > 1) error($"ทรัพย์ต้องอยู่จังหวัดและอำเภอเดียวกัน");

                            if (buildNotInLandDistrict > 0) error($"สิ่งปลูกสร้างต้องอยู่จังหวัดและอำเภอเดียวกันกับที่ดิน");

                            if (lender?.STATUS == cannotMortgage?.L_ID) error($"ผู้กู้{cannotMortgage.L_NAME}");

                            foreach (var mortgager in mortgagers)
                            {
                                if (mortgager?.STATUS == cannotMortgage?.L_ID) error($"ผู้จำนอง{cannotMortgage.L_NAME}");
                            }

                            if (mortgagers.Count == 0) error($"ยังไม่มีผู้จำนอง");

                            return rms.Submit == 1;
                        }

                        int machineMortgageFlagDistinctCount()
                        {
                            var machine = (from t in db.AAG_COL_MACHINE
                                           join h in db.AAG_HEAD_COL on t.HEAD_COL_ID equals h.HEAD_COL_ID
                                           join r in db.AAG_REQUEST on h.REQUEST_ID equals req.REQUEST_ID
                                           select t.MORTGAGE_FLAG).Distinct();
                            return machine.Count();
                        }

                        async void checkinState(int to)
                        {
                            switch (to)
                            {
                                case 57:
                                case 67:
                                    {
                                        db.AAG_MORTGAGE_COL.RemoveRange(db.AAG_MORTGAGE_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID));

                                        foreach (var head in db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                                        {
                                            var land = db.AAG_COL_LAND.FirstOrDefault(s => s.HEAD_COL_ID == head.HEAD_COL_ID);

                                            var mg = db.AAG_MORTGAGE.FirstOrDefault(s => s.REQUEST_ID == req.REQUEST_ID);
                                            var av = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).ToList();
                                            var approve_org_id = av.FirstOrDefault()?.APPROVE_ORG_ID;

                                            switch (head.HEAD_COL_TYPE_ID)
                                            {
                                                case 285003:
                                                    {
                                                        db.AAG_MORTGAGE_COL.Add(new AAG_MORTGAGE_COL()
                                                        {
                                                            REQUEST_ID = req.REQUEST_ID,
                                                            HEAD_COL_ID = head.HEAD_COL_ID,
                                                            SUB_COL_ID = 0,
                                                            COLLATERAL_TYPE_ID = head.HEAD_COL_TYPE_ID,
                                                            COLLATERAL_TYPE = db.APP_MASTER.FirstOrDefault(s => s.L_ID == head.HEAD_COL_TYPE_ID)?.L_NAME,
                                                            COL_CERT_TYPE_ID = land.COL_CERT_TYPE_ID,
                                                            COL_CERT_NO = land.COL_CERT_NO,
                                                            //SOI = head.LOC_ADD_SOI,
                                                            //ROAD = head.LOC_ADD_ROAD,
                                                            PROVINCE_CODE = head.LOC_PROVINCE_CODE,
                                                            DISTRICT_CODE = head.LOC_DISTRICT_CODE,
                                                            SUBDISTRICT_CODE = head.LOC_SUBDISTRICT_CODE,

                                                            RAI = land.RAI,
                                                            NGAN = land.NGAN,
                                                            WA = land.WA,
                                                            FRACTION = land.WA_FRACTION.ToString(),
                                                            PARCEL_NO = land.PARCEL_NO,

                                                            APPR_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).Sum(s => s.APPRAI_AMOUNT),
                                                            APPRAI_DATE = req.APPROVE_DATE,
                                                            APPRAI_TYPE = req.APPRAI_TYPE,
                                                            COMPANY_NAME = db.APP_M_COMPANY.FirstOrDefault(s => s.COMPANY_ID == req.APPRAI_COMPANY_ID)?.COMPANY_NAME,
                                                            APPR_ORG_ID = req.APPRAI_ORG_ID,
                                                            APPR_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == req.APPRAI_ORG_ID)?.ORG_NAME,
                                                            APPROVE_ORG_ID = approve_org_id,
                                                            APPROVE_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == approve_org_id)?.ORG_NAME,
                                                            BOT_COLTYPE_ID = head.BOT_COLTYPE_ID,
                                                            BOT_COLSUBTYPE_ID = head.BOT_COLSUBTYPE_ID,
                                                            MORTGAGE_DATE = mg?.MORTGAGE_DATE,
                                                            OPERATOR_NAME = mg?.MORTGAGEE_AUTHORIZE_NAME,
                                                            MORTGATE_AMOUNT = av.Sum(s => s.APPROVE_AMOUNT),
                                                            CONTRACT_END_DATE = mg?.ATTACHED_CONTRACT_DUE_DATE,
                                                            C_BY = usr.USER_NAME,
                                                            C_DATE = DateTime.Now
                                                        });
                                                    }
                                                    break;
                                                case 285006:
                                                    {
                                                        var builds = db.AAG_COL_BUILD.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID);
                                                        var build = builds.OrderBy(s => s.SUB_COL_ID).FirstOrDefault();
                                                        var buildSubColId = build?.SUB_COL_ID ?? 0;
                                                        db.AAG_MORTGAGE_COL.Add(new AAG_MORTGAGE_COL()
                                                        {
                                                            REQUEST_ID = req.REQUEST_ID,
                                                            HEAD_COL_ID = head.HEAD_COL_ID,
                                                            SUB_COL_ID = 0,
                                                            COLLATERAL_TYPE_ID = head.HEAD_COL_TYPE_ID,
                                                            COLLATERAL_TYPE = db.APP_MASTER.FirstOrDefault(s => s.L_ID == head.HEAD_COL_TYPE_ID)?.L_NAME,
                                                            COL_CERT_TYPE_ID = land.COL_CERT_TYPE_ID,
                                                            COL_CERT_NO = land.COL_CERT_NO,
                                                            SOI = head.LOC_ADD_SOI,
                                                            ROAD = head.LOC_ADD_ROAD,
                                                            PROVINCE_CODE = head.LOC_PROVINCE_CODE,
                                                            DISTRICT_CODE = head.LOC_DISTRICT_CODE,
                                                            SUBDISTRICT_CODE = head.LOC_SUBDISTRICT_CODE,

                                                            RAI = land.RAI,
                                                            NGAN = land.NGAN,
                                                            WA = land.WA,
                                                            FRACTION = land.WA_FRACTION.ToString(),

                                                            BUILD_TYPE_CBS = build?.BUILD_TYPE_CBS,
                                                            BUILD_NO = build?.LOC_ADD_NO,
                                                            BUILD_FLOOR_TOTAL = build?.BUILD_FLOOR_TOTAL,

                                                            PARCEL_PRICE = db.AAG_COL_AMOUNT.Where(s => s.SUB_COL_ID == land.SUB_COL_ID && s.SUB_COL_TYPE == "L").Sum(s => s.APPROVE_AMOUNT),
                                                            BUILD_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID && s.SUB_COL_TYPE == "B").Sum(s => s.APPROVE_AMOUNT),

                                                            APPR_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).Sum(s => s.APPRAI_AMOUNT),
                                                            APPRAI_DATE = req.APPROVE_DATE,
                                                            APPRAI_TYPE = req.APPRAI_TYPE,
                                                            COMPANY_NAME = db.APP_M_COMPANY.FirstOrDefault(s => s.COMPANY_ID == req.APPRAI_COMPANY_ID)?.COMPANY_NAME,
                                                            APPR_ORG_ID = req.APPRAI_ORG_ID,
                                                            APPR_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == req.APPRAI_ORG_ID)?.ORG_NAME,
                                                            APPROVE_ORG_ID = approve_org_id,
                                                            APPROVE_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == approve_org_id)?.ORG_NAME,
                                                            BOT_COLTYPE_ID = head.BOT_COLTYPE_ID,
                                                            BOT_COLSUBTYPE_ID = head.BOT_COLSUBTYPE_ID,
                                                            MORTGAGE_DATE = mg?.MORTGAGE_DATE,
                                                            OPERATOR_NAME = mg?.MORTGAGEE_AUTHORIZE_NAME,
                                                            MORTGATE_AMOUNT = av.Sum(s => s.APPROVE_AMOUNT),
                                                            CONTRACT_END_DATE = mg?.ATTACHED_CONTRACT_DUE_DATE,
                                                            C_BY = usr.USER_NAME,
                                                            C_DATE = DateTime.Now
                                                        });
                                                    }
                                                    break;
                                                case 285011:
                                                    {
                                                        var machines = db.AAG_COL_MACHINE.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID);

                                                        foreach (var machine in machines.OrderBy(s => s.SUB_COL_ID))
                                                        {
                                                            db.AAG_MORTGAGE_COL.Add(new AAG_MORTGAGE_COL()
                                                            {
                                                                REQUEST_ID = req.REQUEST_ID,
                                                                HEAD_COL_ID = head.HEAD_COL_ID,
                                                                SUB_COL_ID = machine.SUB_COL_ID,

                                                                COLLATERAL_TYPE_ID = head.HEAD_COL_TYPE_ID,
                                                                COLLATERAL_TYPE = db.APP_MASTER.FirstOrDefault(s => s.L_ID == head.HEAD_COL_TYPE_ID)?.L_NAME,
                                                                COL_CERT_TYPE_ID = land.COL_CERT_TYPE_ID,
                                                                COL_CERT_NO = land.COL_CERT_NO,
                                                                SOI = head.LOC_ADD_SOI,
                                                                ROAD = head.LOC_ADD_ROAD,
                                                                PROVINCE_CODE = head.LOC_PROVINCE_CODE,
                                                                DISTRICT_CODE = head.LOC_DISTRICT_CODE,
                                                                SUBDISTRICT_CODE = head.LOC_SUBDISTRICT_CODE,

                                                                REGIS_NO_FROM = machine.REGIS_NO_FROM,
                                                                REGIS_NO_TO = machine.REGIS_NO_TO,
                                                                FACTORY_ADD_NO = head.LOC_ADD_NO,
                                                                MACHINE_SIZE = machine.MACHINE_SIZE,
                                                                MACHINE_SIZE_UOM = machine.MACHINE_SIZE_UOM,
                                                                PURCHASED_PRICE = machine.PURCHASED_PRICE,
                                                                USED_START_DATE = machine.USED_START_DATE,
                                                                AGE_REMAIN = machine.AGE_REMAIN,
                                                                AGE_USED = machine.AGE_USED,
                                                                RULING_COST = machine.RULING_COST,

                                                                APPR_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).Sum(s => s.APPRAI_AMOUNT),
                                                                APPRAI_DATE = req.APPROVE_DATE,

                                                                APPRAI_TYPE = req.APPRAI_TYPE,
                                                                COMPANY_NAME = db.APP_M_COMPANY.FirstOrDefault(s => s.COMPANY_ID == req.APPRAI_COMPANY_ID)?.COMPANY_NAME,
                                                                APPR_ORG_ID = req.APPRAI_ORG_ID,
                                                                APPR_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == req.APPRAI_ORG_ID)?.ORG_NAME,
                                                                APPROVE_ORG_ID = approve_org_id,
                                                                APPROVE_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == approve_org_id)?.ORG_NAME,
                                                                BOT_COLTYPE_ID = head.BOT_COLTYPE_ID,
                                                                BOT_COLSUBTYPE_ID = head.BOT_COLSUBTYPE_ID,
                                                                MORTGAGE_DATE = mg?.MORTGAGE_DATE,
                                                                OPERATOR_NAME = mg?.MORTGAGEE_AUTHORIZE_NAME,
                                                                MORTGATE_AMOUNT = av.Sum(s => s.APPROVE_AMOUNT),
                                                                CONTRACT_END_DATE = mg?.ATTACHED_CONTRACT_DUE_DATE,
                                                                C_BY = usr.USER_NAME,
                                                                C_DATE = DateTime.Now
                                                            });
                                                        }
                                                    }
                                                    break;
                                                case 285066:
                                                    {
                                                        var condo = db.AAG_COL_CONDO.FirstOrDefault(s => s.HEAD_COL_ID == head.HEAD_COL_ID);
                                                        var BuildNo = condo?.BUILD_NO ?? "";
                                                        if (!string.IsNullOrEmpty(BuildNo) && BuildNo.Length > 10) BuildNo = BuildNo.Substring(0, 10);

                                                        db.AAG_MORTGAGE_COL.Add(new AAG_MORTGAGE_COL()
                                                        {
                                                            REQUEST_ID = req.REQUEST_ID,
                                                            HEAD_COL_ID = head.HEAD_COL_ID,
                                                            SUB_COL_ID = 0,
                                                            COLLATERAL_TYPE_ID = head.HEAD_COL_TYPE_ID,
                                                            COLLATERAL_TYPE = db.APP_MASTER.FirstOrDefault(s => s.L_ID == head.HEAD_COL_TYPE_ID)?.L_NAME,
                                                            COL_CERT_TYPE_ID = land.COL_CERT_TYPE_ID,
                                                            COL_CERT_NO = land.COL_CERT_NO,
                                                            SOI = head.LOC_ADD_SOI,
                                                            ROAD = head.LOC_ADD_ROAD,
                                                            PROVINCE_CODE = head.LOC_PROVINCE_CODE,
                                                            DISTRICT_CODE = head.LOC_DISTRICT_CODE,
                                                            SUBDISTRICT_CODE = head.LOC_SUBDISTRICT_CODE,

                                                            RAI = land.RAI,
                                                            NGAN = land.NGAN,
                                                            WA = land.WA,
                                                            FRACTION = land.WA_FRACTION.ToString(),

                                                            ROOM_NO = condo.ROOM_NO,
                                                            BUILD_NO = BuildNo, //TODO
                                                            FLOOR_NO = condo.FLOOR_NO,
                                                            CONDO_NO = condo.CONDO_NO,
                                                            CONDO_NAME = condo.CONDO_NAME,
                                                            AREA_METER = condo.AREA_METER,

                                                            APPR_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).Sum(s => s.APPRAI_AMOUNT),
                                                            APPRAI_DATE = req.APPROVE_DATE,

                                                            APPRAI_TYPE = req.APPRAI_TYPE,
                                                            COMPANY_NAME = db.APP_M_COMPANY.FirstOrDefault(s => s.COMPANY_ID == req.APPRAI_COMPANY_ID)?.COMPANY_NAME,
                                                            APPR_ORG_ID = req.APPRAI_ORG_ID,
                                                            APPR_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == req.APPRAI_ORG_ID)?.ORG_NAME,
                                                            APPROVE_ORG_ID = approve_org_id,
                                                            APPROVE_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == approve_org_id)?.ORG_NAME,
                                                            BOT_COLTYPE_ID = head.BOT_COLTYPE_ID,
                                                            BOT_COLSUBTYPE_ID = head.BOT_COLSUBTYPE_ID,
                                                            MORTGAGE_DATE = mg?.MORTGAGE_DATE,
                                                            OPERATOR_NAME = mg?.MORTGAGEE_AUTHORIZE_NAME,
                                                            MORTGATE_AMOUNT = av.Sum(s => s.APPROVE_AMOUNT),
                                                            CONTRACT_END_DATE = mg?.ATTACHED_CONTRACT_DUE_DATE,
                                                            C_BY = usr.USER_NAME,
                                                            C_DATE = DateTime.Now
                                                        });
                                                    }
                                                    break;
                                                case 285008:
                                                    {
                                                        db.AAG_MORTGAGE_COL.Add(new AAG_MORTGAGE_COL()
                                                        {
                                                            REQUEST_ID = req.REQUEST_ID,
                                                            HEAD_COL_ID = head.HEAD_COL_ID,
                                                            SUB_COL_ID = 0,
                                                            COLLATERAL_TYPE_ID = head.HEAD_COL_TYPE_ID,
                                                            COLLATERAL_TYPE = db.APP_MASTER.FirstOrDefault(s => s.L_ID == head.HEAD_COL_TYPE_ID)?.L_NAME,
                                                            COL_CERT_TYPE_ID = land.COL_CERT_TYPE_ID,
                                                            COL_CERT_NO = land.COL_CERT_NO,
                                                            SOI = head.LOC_ADD_SOI,
                                                            ROAD = head.LOC_ADD_ROAD,
                                                            PROVINCE_CODE = head.LOC_PROVINCE_CODE,
                                                            DISTRICT_CODE = head.LOC_DISTRICT_CODE,
                                                            SUBDISTRICT_CODE = head.LOC_SUBDISTRICT_CODE,

                                                            BUILD_NO = head.LOC_ADD_NO,

                                                            APPR_PRICE = db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).Sum(s => s.APPRAI_AMOUNT),
                                                            APPRAI_DATE = req.APPROVE_DATE,
                                                            APPRAI_TYPE = req.APPRAI_TYPE,
                                                            COMPANY_NAME = db.APP_M_COMPANY.FirstOrDefault(s => s.COMPANY_ID == req.APPRAI_COMPANY_ID)?.COMPANY_NAME,
                                                            APPR_ORG_ID = req.APPRAI_ORG_ID,
                                                            APPR_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == req.APPRAI_ORG_ID)?.ORG_NAME,
                                                            APPROVE_ORG_ID = approve_org_id,
                                                            APPROVE_ORG_NAME = db.APP_M_ORG.FirstOrDefault(s => s.ORG_ID == approve_org_id)?.ORG_NAME,
                                                            BOT_COLTYPE_ID = head.BOT_COLTYPE_ID,
                                                            BOT_COLSUBTYPE_ID = head.BOT_COLSUBTYPE_ID,
                                                            MORTGAGE_DATE = mg?.MORTGAGE_DATE,
                                                            OPERATOR_NAME = mg?.MORTGAGEE_AUTHORIZE_NAME,
                                                            MORTGATE_AMOUNT = av.Sum(s => s.APPROVE_AMOUNT),
                                                            CONTRACT_END_DATE = mg?.ATTACHED_CONTRACT_DUE_DATE,
                                                            C_BY = usr.USER_NAME,
                                                            C_DATE = DateTime.Now
                                                        });
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    break;
                                case 100:
                                    {
                                        await setOwner(100, null);
                                        if (req.REF_REQUEST_ID != null)
                                        {
                                            var old = db.AAG_REQUEST.FirstOrDefault(s => s.REQUEST_ID == req.REF_REQUEST_ID);
                                            if(old != null) old.REVIEW_REQUEST_ID = req.REQUEST_ID;
                                        }
                                    }
                                    break;
                            }
                        }

                        void addJobAssignCommittee(List<AutoAssignCommittee> AutoAssignCommittee)
                        {
                            foreach (var acs in AutoAssignCommittee)
                            {
                                db.AAG_JOB_ASSIGN_COMMITTEE.Add(new AAG_JOB_ASSIGN_COMMITTEE()
                                {
                                    REQUEST_ID = acs.REQUEST_ID,
                                    COMM = acs.COMM,
                                    ROLE_ID = acs.ROLE_ID,
                                    JOB_SIZE = acs.JOB_SIZE,
                                    USER_NAME = acs.USER_NAME,
                                    STATUS= "Active",
                                    C_BY = usr.USER_NAME,
                                    E_BY = usr.USER_NAME,
                                    C_DATE = DateTime.Now,
                                    E_DATE = DateTime.Now,
                                });
                            }
                        }

                        void setInActiveCommittee()
                        {
                            var dbupdate = db.AAG_JOB_ASSIGN_COMMITTEE.Where(o => o.REQUEST_ID == req.REQUEST_ID && o.STATUS == "Active").ToList();
                            foreach (var InActive in dbupdate)
                            {
                                InActive.STATUS = "InActive";
                                InActive.E_BY = usr.USER_NAME;
                                InActive.E_DATE = DateTime.Now;
                            }
                        }

                        async Task<bool> checkFlow()
                        {
                            switch (fromState)
                            {
                                case 0:
                                    {
                                        req.LENDER_NAME = $"{lender.TITLE}{lender.FIRST_NAME} {lender.LAST_NAME}";

                                        var mortgage = await db.AAG_REQUEST_OWNER.Where(s => s.REQUEST_ID == doc_id && s.OWNER_TYPE == 2).OrderBy(s => s.RUNNING_ID).FirstOrDefaultAsync();
                                        req.MORTGAGE_NAME = $"{mortgage.TITLE}{mortgage.FIRST_NAME} {mortgage.LAST_NAME}";
                                    }
                                    break;
                                case 11:
                                    {
                                        var head = await db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == doc_id).OrderBy(s => s.HEAD_COL_ID).FirstOrDefaultAsync();

                                        var land = await db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == head.HEAD_COL_ID).OrderBy(s => s.SUB_COL_ID).FirstOrDefaultAsync();

                                        req.FLOW_ID = 1;

                                        if (req.REQUEST_GROUP == 210202)
                                        {
                                            req.FLOW_ID = 5;
                                        }
                                        else if (req.REQUEST_GROUP == 210203)
                                        {
                                            req.FLOW_ID = 6;
                                        }
                                        else if (req.REQUEST_TYPE == 2 && req.REQUEST_OBJECTIVE == 210102)
                                        {
                                            req.FLOW_ID = 2;
                                        }
                                        else if (head.BOT_COLTYPE_ID == 286007)
                                        {
                                            req.FLOW_ID = 3;
                                        }

                                        if (head.LATITUDE == null || head.LONGITUDE == null) error("ยังไม่ได้ระบุตำแหน่งที่ตั้งทรัพย์");

                                        req.APPRAI_TYPE = 1;
                                        req.ROLE_2_INBOX = DateTime.Now;
                                        var provinceCode = string.Empty;

                                        var maxInternalAppraiAmount = 10000000m;
                                        try
                                        {
                                            var value = ConfigurationManager.AppSettings["maxInternalAppraiAmount"];
                                            if (!string.IsNullOrEmpty(value)) maxInternalAppraiAmount = Convert.ToDecimal(value);
                                        }
                                        catch (Exception)
                                        {
                                            // Do Nothing
                                        }

                                        //new CR
                                        var cProvinceCode = head.LOC_PROVINCE_CODE;
                                        var cProvince = await this.db.APP_M_PROVINCE.Where(o => o.PROVINCE_CODE == cProvinceCode).FirstOrDefaultAsync();
                                        if (cProvince == null)
                                            error($"ไม่พบข้อมูลหลักจังหวัด {cProvinceCode}");
                                        else
                                        {
                                            //var newOrg = await this.db.APP_M_ORG_NEW.Where(o => o.ORG_ID == cProvince.APPRAI_ORG_ID || o.ORG_ID == usr.ORG_ID).FirstOrDefaultAsync()

                                            //bool checkNewOrg = false
                                            // NOSONAR if (newOrg == null)
                                            //{ //
                                            //    var userOrg = await db.APP_M_ORG.Where(s => s.ORG_ID == usr.ORG_ID).FirstOrDefaultAsync()
                                            //    if (userOrg != null && !string.IsNullOrEmpty(userOrg.PROVINCE_CODE))
                                            //    { //
                                            //        var usrProvince = await this.db.APP_M_PROVINCE.Where(o => o.PROVINCE_CODE == userOrg.PROVINCE_CODE).FirstOrDefaultAsync()
                                            //        if (usrProvince != null)
                                            //        {
                                            //            var newOrg2 = await this.db.APP_M_ORG_NEW.Where(o => o.ORG_ID == usrProvince.APPRAI_ORG_ID).FirstOrDefaultAsync()
                                            //            if (newOrg2 != null)
                                            //                checkNewOrg = true
                                            //        }  //
                                            //    }  //
                                            //}  //
                                            //else
                                            //    checkNewOrg = true

                                            // NOSONAR if (checkNewOrg)
                                            //{  //
                                            //    req.APPRAI_TYPE = 1
                                            //    provinceCode = head.LOC_PROVINCE_CODE
                                            //    if (req.CREDIT_LIMIT > maxInternalAppraiAmount || head?.HEAD_COL_TYPE_ID == 285011 || land?.LEGAL_ON_LAND_TYPE == 1)
                                            //    { //
                                            //        req.APPRAI_TYPE = 2
                                            //    } //
                                            //} //
                                            //else
                                            //{ //
                                            if (req.CREDIT_LIMIT > maxInternalAppraiAmount || head?.HEAD_COL_TYPE_ID == 285011 || land?.LEGAL_ON_LAND_TYPE == 1)
                                                {
                                                    req.APPRAI_TYPE = 2;
                                                    provinceCode = await db.APP_M_ORG.Where(s => s.ORG_ID == req.ENTRY_ORG_ID).Select(s => s.PROVINCE_CODE).FirstOrDefaultAsync();
                                                }
                                                else
                                                {
                                                    req.APPRAI_TYPE = 1;
                                                    provinceCode = head.LOC_PROVINCE_CODE;
                                                }
                                                if ((req.REQUEST_GROUP == 210202 || req.REQUEST_GROUP == 210203) && head?.HEAD_COL_TYPE_ID != 285011)
                                                {
                                                    req.APPRAI_TYPE = 1;
                                                    provinceCode = head.LOC_PROVINCE_CODE;
                                                }
                                                if (head?.HEAD_COL_TYPE_ID == 285008)
                                                {
                                                    req.APPRAI_TYPE = 1;
                                                    provinceCode = head.LOC_PROVINCE_CODE;
                                                }
                                            //}  //
                                        }

                                        var province = await db.APP_M_PROVINCE.Where(s => s.PROVINCE_CODE == provinceCode).FirstOrDefaultAsync();

                                        if (province == null) error($"ไม่พบข้อมูลหลักจังหวัด {provinceCode}");
                                        else
                                        {
                                            req.APPRAI_ORG_ID = province.APPRAI_ORG_ID;
                                            var newOrg = await this.db.APP_M_ORG_NEW.Where(o => o.ORG_ID == province.APPRAI_ORG_ID).FirstOrDefaultAsync();
                                            if(newOrg != null && newOrg.ORG_PID != null)
                                            {
                                                req.DISPATCH_ORG_ID = newOrg.ORG_PID;
                                            }
                                            else
                                            {
                                                req.DISPATCH_ORG_ID = province.APPRAI_ORG_ID;
                                            }
                                        }
                                        if (req.APPRAI_ORG_ID == null) error($"ยังไม่ได้กำหนดหน่วยงานผู้จ่ายงาน");
                                        else
                                        {
                                            await setOwner(2, province.APPRAI_ORG_ID);

                                            if (req.APPRAI_TYPE == 1)
                                            {
                                                foreach (var aa in db.APP_M_DISTRICT.Where(s => s.PROVINCE_CODE == head.LOC_PROVINCE_CODE && s.DISTRICT_CODE == head.LOC_DISTRICT_CODE))
                                                {
                                                    req.APPRAI_USER_NAME = aa.APPR_USER_NAME;
                                                }
                                            }
                                            //updateRequest()
                                        }

                                        var attach = db.AAG_REQUEST_ATTACH.Where(s => s.REQUEST_ID == req.REQUEST_ID).FirstOrDefault();
                                        if (attach == null) error($"ยังไม่ได้แนบเอกสาร");

                                        if (req.COL_TYPE == 285011 && machineMortgageFlagDistinctCount() > 1)
                                        {
                                            error("การจดทะเบียนสิทธิและนิติกรรมต้องเหมือนกันทุกทรัพย์");
                                        }

                                        
                                        var cnt = colDupCount();
                                        if (cnt > 0) error("รายการทรัพย์ซ้ำ");

                                        if (req.REQUEST_OBJECTIVE == null) error("ยังไม่ได้ระบุวัตถุประสงค์");
                                    }
                                    break;
                                case 21:
                                    {
                                        switch (req.APPRAI_TYPE ?? 0)
                                        {
                                            case 1:
                                                {
                                                    var owner = await setOwner(3, req.APPRAI_ORG_ID, req.APPRAI_USER_NAME);

                                                    if (req.APPRAI_ORG_ID == null)
                                                    {
                                                        error("ยังไม่ได้เลือกหน่วยงานผู้ประเมิน");
                                                    }
                                                    if (req.APPRAI_USER_NAME == null)
                                                    {
                                                        error("ยังไม่ได้เลือกผู้ประเมิน");
                                                    }
                                                    req.APPRAI_COMPANY_ID = null;
                                                    owner.APPRAI_COMPANY_ID = null;
                                                }
                                                break;
                                            case 2:
                                                {
                                                    var owner = await setOwner(3, req.APPRAI_ORG_ID);

                                                    owner.APPRAI_COMPANY_ID = req.APPRAI_COMPANY_ID;
                                                    owner.USER_NAME = null;

                                                    // NOSONAR if (req.APPRAI_COMPANY_ID == null)
                                                    //{  //
                                                    //    error("ยังไม่ได้เลือกบริษัทประเมิน");
                                                    //} //

                                                    if (req.EXTERNAL_METHOD == null)
                                                    {
                                                        error("ยังไม่ได้ระบุวิธีการส่งประเมินบริษัทภายนอก");
                                                    }
                                                    else
                                                    {
                                                        int EXTERNAL_METHOD = req.EXTERNAL_METHOD.GetValueOrDefault(0);
                                                        string all_result = "";
                                                        int get_COMPANY_ID = 0;
                                                        int get_PROVINCE_CODE = 0;
                                                        int get_FLAG = 0;
                                                        switch (EXTERNAL_METHOD)
                                                        {
                                                            //วิธีส่งประเมินนอก 1=AutoAssign,2=ReturnCompany,3=Manual
                                                            case 1:
                                                                //var resultAutoAssign =this.autoAssign.PreAutoAssign()
                                                                //all_result,COMPANY_ID,PROVINCE_CODE,FLAG
                                                                var GetPreAutoAssignOne = this.autoAssign.PreAutoAssignOne(req, true);//all_result,COMPANY_ID,PROVINCE_CODE,FLAG
                                                                all_result = GetPreAutoAssignOne.Item1;
                                                                get_COMPANY_ID = GetPreAutoAssignOne.Item2;
                                                                get_PROVINCE_CODE = GetPreAutoAssignOne.Item3;
                                                                get_FLAG = GetPreAutoAssignOne.Item4;

                                                                if (get_COMPANY_ID <= 0)
                                                                {
                                                                    error("ไม่พบบริษัทประเมินภายนอก กรุณาเลือกบริษัทประเมินภายนอกเอง");
                                                                    rms.all_result = "Manual";
                                                                }
                                                                if (flowPreactionType == FlowPreactionType.Checkin && rms.Submit == 1)
                                                                {
                                                                    //Save APPRAI_COMPANY_ID in PreAutoAssignOne
                                                                    GetPreAutoAssignOne = this.autoAssign.PreAutoAssignOne(req, false);
                                                                    all_result = GetPreAutoAssignOne.Item1;
                                                                    get_COMPANY_ID = GetPreAutoAssignOne.Item2;
                                                                    get_PROVINCE_CODE = GetPreAutoAssignOne.Item3;
                                                                    get_FLAG = GetPreAutoAssignOne.Item4;

                                                                    owner.APPRAI_COMPANY_ID = get_COMPANY_ID;

                                                                }
                                                                break;
                                                            case 2:
                                                                if (req.APPRAI_COMPANY_ID == null)
                                                                {
                                                                    error("ไม่พบบริษัทประเมินบริษัทประเมินภายนอก(เดิม)");
                                                                }
                                                                get_COMPANY_ID = req.APPRAI_COMPANY_ID.GetValueOrDefault(0);
                                                                get_FLAG = 2;
                                                                break;
                                                            case 3:
                                                                if (req.APPRAI_COMPANY_ID == null)
                                                                {
                                                                        error("ไม่พบบริษัทประเมินภายนอก");
                                                                }
                                                                get_COMPANY_ID = req.APPRAI_COMPANY_ID.GetValueOrDefault(0);
                                                                get_FLAG = 3;
                                                                rms.manual_note = req.MANUAL_COMPANY_NOTE;
                                                                break;
                                                        }
                                                        if (flowPreactionType == FlowPreactionType.Checkin && rms.Submit == 1)
                                                        {
                                                            await this.autoAssign.Insert_REQUEST_AUTO_ASSIGN_LOG(req.REQUEST_ID, get_COMPANY_ID, get_FLAG, get_PROVINCE_CODE);
                                                        }
                                                    }

                                                }
                                                break;
                                            default:
                                                error("ยังไม่ได้เลือกประเภทผู้ประเมิน");
                                                break;
                                        }

                                        if (req.COL_TYPE == 285008 && req.APPRAI_TREEBANK_ID == null)
                                        {
                                            error("ยังไม่ได้ระบุธนาคารต้นไม้");
                                        }

                                        req.APPRAI_ATTACH_DATE = null;
                                        req.APPRAI_ATTACH_PATH = null;
                                        req.ROLE_3_INBOX = DateTime.Now;
                                        if (usr.ORG_ID != null)
                                        {
                                            req.DISPATCH_ORG_ID = usr.ORG_ID;
                                            req.DISPATCH_USER_NAME = usr.USER_NAME;
                                            req.DISPATCH_DATE = DateTime.Now;
                                        }
                                        if (!String.IsNullOrEmpty(req.APPRAI_USER_NAME))
                                        {
                                            var appraiUserOrg = this.db.APP_USERS.Where(u => u.USER_NAME == req.APPRAI_USER_NAME).FirstOrDefault()?.ORG_ID;
                                            req.APPRAI_USER_ORG_ID = appraiUserOrg;
                                        }
                                    }
                                    break;
                                case 31:
                                    {
                                        var owner = await db.BPM_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID == 3).FirstOrDefaultAsync();

                                        if (owner == null)
                                        {
                                            error("ยังไม่มีรายการเจ้าของงาน");
                                        }
                                        else
                                        {
                                            owner.USER_NAME = usr.USER_NAME;
                                        }
                                    }
                                    break;
                                case 32:
                                    {
                                        if (request.REQUEST_PORTFOLIO_REF_ID != null &&  !toStates.Contains(999))
                                        {
                                            await PortfolioValidate(flowPreactionType, request, fromState, toStates, actionType, error, warning);
                                        }

                                        //db.AAG_COL_APPRAI.RemoveRange(db.AAG_COL_APPRAI.Where(s => s.REQUEST_ID == req.REQUEST_ID))

                                        db.AAG_COL_AMOUNT.RemoveRange(db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID));

                                        bool IsMinus = false;
                                        bool IsApprisal = false;
                                        decimal Amount = 0;
                                        int headWithoutPhoto = 0;

                                        var folder = db.APP_CONFIG_FOLDER.Where(s => s.CODE == "APPRAI").FirstOrDefault();
                                        int headWithoutGrade = 0;
                                        bool IsWithoutSurveyDate = true;
                                        var aag_request = db.AAG_REQUEST.Where(s => s.REQUEST_ID == req.REQUEST_ID).FirstOrDefault();
                                        if (aag_request != null && req.APPRAI_TYPE == 1)
                                        {
                                            IsWithoutSurveyDate = aag_request.SURVEY_DATE != null;
                                        }

                                        foreach (var h in db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID).OrderBy(s => s.HEAD_COL_ID).ToList())
                                        {
                                            if (req.APPRAI_TYPE == 1)
                                            {
                                                if (db.AAG_PHOTO.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID).Count() == 0)
                                                {
                                                    headWithoutPhoto++;
                                                }

                                                var outputKeepPath = folder.PATH;
                                                outputKeepPath = outputKeepPath.Replace("{yyyymmdd}", request.REQUEST_DATE?.ToString("yyyyMMdd"));
                                                outputKeepPath = outputKeepPath.Replace("{req_no}", request.REQUEST_ID.ToString());
                                                outputKeepPath = outputKeepPath.Replace("{head_id}", h.HEAD_COL_ID.ToString());
                                                outputKeepPath = outputKeepPath.Replace("{NAME}", "AppraiGrade.pdf");

                                                var outputFullPath = folder.ROOT_FOLDER + outputKeepPath;

                                                var pdfPath = folder.ROOT_FOLDER + outputKeepPath;

                                                switch (h.HEAD_COL_TYPE_ID)
                                                {
                                                    case 285003:
                                                    case 285006:
                                                    case 285066:
                                                        if (!File.Exists(pdfPath)) headWithoutGrade++;
                                                        break;
                                                }
                                            }

                                            if (IsMinus) break;
                                            switch (h.HEAD_COL_TYPE_ID)
                                            {
                                                case 285003:
                                                    {
                                                        foreach (var s in db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            if (h.BOT_COLTYPE_ID != 286007) s.COL_CERT_SUBTYPE_ID = null;
                                                            var master = db.APP_MASTER.Where(m => m.L_ID == (s.COL_CERT_SUBTYPE_ID ?? s.COL_CERT_TYPE_ID)).FirstOrDefault();
                                                            //var dsca = master?.L_NAME + " " + s.COL_CERT_NO
                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "L", "wqs", s.APPR_PRICE ?? 0)
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "L");
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "L", dsca);

                                                            var apprai = db.AAG_COL_APPRAI_LAND.FirstOrDefault(t => t.SUB_COL_ID == s.SUB_COL_ID);
                                                            if (apprai != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (apprai.WQS_TOTAL_PRICE < 0 || apprai.INC_TOTAL_PRICE < 0 || apprai.MOU_TOTAL_PRICE < 0 || apprai.OTH_TOTAL_PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += (apprai.WQS_TOTAL_PRICE ?? 0) + (apprai.INC_TOTAL_PRICE ?? 0) + (apprai.MOU_TOTAL_PRICE ?? 0) + (apprai.OTH_TOTAL_PRICE ?? 0);
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 285006:
                                                    {
                                                        foreach (var s in db.AAG_COL_LAND.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            var master = db.APP_MASTER.Where(m => m.L_ID == (s.COL_CERT_SUBTYPE_ID ?? s.COL_CERT_TYPE_ID)).FirstOrDefault();
                                                            //var dsca = master?.L_NAME + " " + s.COL_CERT_NO
                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "L", "wqs", s.APPR_PRICE ?? 0)
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "L");
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "L", dsca);

                                                            var apprai = db.AAG_COL_APPRAI_LAND.FirstOrDefault(t => t.SUB_COL_ID == s.SUB_COL_ID);
                                                            if (apprai != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (apprai.WQS_TOTAL_PRICE < 0 || apprai.INC_TOTAL_PRICE < 0 || apprai.MOU_TOTAL_PRICE < 0 || apprai.OTH_TOTAL_PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += (apprai.WQS_TOTAL_PRICE ?? 0) + (apprai.INC_TOTAL_PRICE ?? 0) + (apprai.MOU_TOTAL_PRICE ?? 0) + (apprai.OTH_TOTAL_PRICE ?? 0);
                                                            }

                                                        }
                                                        foreach (var s in db.AAG_COL_BUILD.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            var master = db.APP_MASTER.Where(m => m.L_ID == s.BUILD_TYPE_CBS).FirstOrDefault();
                                                            //var dsca = master?.L_NAME
                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "B", "cos", s.APPR_PRICE)
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "B");
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "B", dsca);

                                                            var apprai = db.AAG_COL_APPRAI_BUILD.FirstOrDefault(t => t.SUB_COL_ID == s.SUB_COL_ID);
                                                            if (apprai != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (apprai.COS_APPRAI_PRICE < 0 || apprai.BOQ_APPRAI_PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += (apprai.COS_APPRAI_PRICE ?? 0) + (apprai.BOQ_APPRAI_PRICE ?? 0);
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 285011:
                                                    {
                                                        foreach (var s in db.AAG_COL_MACHINE.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            //var dsca = s.MACHINE_NAME + " " + (s.REGIS_YN == 1 ? (s.REGIS_NO_FROM + " ถึง " + s.REGIS_NO_TO) : ("Serial " + s.SERIAL_NO))

                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "M", "oth", s.APR_PRICE ?? 0)
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "M");
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "M", dsca);

                                                            var apprai = db.AAG_COL_APPRAI_MACHINE.FirstOrDefault(t => t.SUB_COL_ID == s.SUB_COL_ID);
                                                            if (apprai != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (apprai.APPRAI_PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += (apprai.APPRAI_PRICE ?? 0);
                                                            }

                                                        }
                                                    }
                                                    break;
                                                case 285066:
                                                    {
                                                        foreach (var s in db.AAG_COL_CONDO.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            //var dsca = s.CONDO_NAME
                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "C", "wqs", s.APPR_PRICE)
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "C");
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "C", dsca);

                                                            var apprai = db.AAG_COL_APPRAI_CONDO.FirstOrDefault(t => t.SUB_COL_ID == s.SUB_COL_ID);
                                                            if (apprai != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (apprai.WQS_TOTAL_PRICE < 0 || apprai.INC_TOTAL_PRICE < 0 || apprai.OTH_TOTAL_PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += (apprai.WQS_TOTAL_PRICE ?? 0) + (apprai.INC_TOTAL_PRICE ?? 0) + (apprai.OTH_TOTAL_PRICE ?? 0);
                                                            }

                                                        }
                                                    }
                                                    break;
                                                case 285008:
                                                    {
                                                        foreach (var s in db.AAG_COL_TREE.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                                        {
                                                            var amount = s.PRICE;
                                                            var master = db.APP_MASTER.FirstOrDefault(m => m.L_ID == s.TREE_ID);
                                                            //var dsca = master?.L_NAME2 + " - " + master?.L_NAME
                                                            var dsca = GetSub(h.HEAD_COL_TYPE_ID, s.SUB_COL_ID, "T");
                                                            //addColApprai(s.HEAD_COL_ID, s.SUB_COL_ID, "T", "oth", amount)
                                                            addColAmount(s.HEAD_COL_ID, s.SUB_COL_ID, "T", dsca);
                                                            db.AAG_COL_APPRAI_TREE.RemoveRange(db.AAG_COL_APPRAI_TREE.Where(t => t.SUB_COL_ID == s.SUB_COL_ID));
                                                            var apprai = new AAG_COL_APPRAI_TREE()
                                                            {
                                                                SUB_COL_ID = s.SUB_COL_ID,
                                                                QUANTITY = s.QUANTITY,
                                                                VALUE = s.PRICE,
                                                                OTH_APPRAI_PRICE = s.PRICE,
                                                                INC_APPRAI_PRICE = s.PRICE,
                                                                C_BY = usr.USER_NAME,
                                                                C_DATE = DateTime.Now
                                                            };
                                                            db.AAG_COL_APPRAI_TREE.Add(apprai);
                                                            if (s.PRICE != null)
                                                            {
                                                                IsApprisal = true;
                                                                if (s.PRICE < 0)
                                                                {
                                                                    IsMinus = true;
                                                                    break;
                                                                }
                                                                else Amount += s.PRICE ?? 0;
                                                            }
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        await checkSignOwner();
                                        if (IsMinus) { error("ประเมินราคาติดลบ"); }
                                        else if (!IsApprisal) { error("ยังไม่ได้ประเมินราคา"); }
                                        else if (Amount == 0) { error("รวมประเมินราคาทุกรายการเท่ากับ 0"); }

                                        if (headWithoutPhoto > 0) error("ยังไม่ได้แนบภาพถ่าย");

                                        if (!IsWithoutSurveyDate) error("ยังไม่ได้บันทึกวันที่สำรวจและประเมิน ที่ Tap นัดหมาย");
                                        if (headWithoutGrade > 0) error("ยังไม่ได้จัดเกรด");

                                        if (req.COL_TYPE == 285011 && machineMortgageFlagDistinctCount() > 1)
                                        {
                                            error("การจดทะเบียนสิทธิและนิติกรรมต้องเหมือนกันทุกทรัพย์");
                                        }

                                        //req.SURVEY_DATE = DateTime.Now
                                    }
                                    break;
                                case 33:
                                    {
                                        if (request.REQUEST_PORTFOLIO_REF_ID != null && !toStates.Contains(999))
                                        {
                                            await PortfolioValidate(flowPreactionType, request, fromState, toStates, actionType, error, warning);
                                        }
                                        var maxProvinceApproveAmount = 50000000m;
                                        try
                                        {
                                            var value = ConfigurationManager.AppSettings["maxProvinceApproveAmount"];
                                            if (!string.IsNullOrEmpty(value)) maxProvinceApproveAmount = Convert.ToDecimal(value);
                                        }
                                        catch 
                                        {
                                            // NOSONAR
                                        }
                                        var countMinus = 0;
                                        var countNoAmount = 0;

                                        var apprai_amount = 0m;

                                        var requiredActor = 3;

                                        int? approveOrgId = req.APPRAI_ORG_ID;

                                        int noAppraiReportCount = 0;

                                        foreach (var h in db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                                        {
                                            if (req.APPRAI_TYPE == 1)
                                            {
                                                if (h.APPRAI_DOC_PATH == null) noAppraiReportCount++;
                                            }
                                            else
                                            {
                                                if (req.APPRAI_ATTACH_PATH == null) noAppraiReportCount++;
                                            }
                                            foreach (var s in db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID))
                                            {
                                                apprai_amount += s.APPRAI_AMOUNT ?? 0;

                                                if (s.APPRAI_AMOUNT == null) countNoAmount++;

                                                if ((s.APPRAI_AMOUNT ?? 0) < 0) countMinus++;
                                            }
                                        }
                                        if (apprai_amount == 0) error("ราคาอนุมัติต้องมากกว่า 0");
                                        if (countNoAmount > 0) error("ยังไม่ได้สรุปราคาประเมินขั้นต้น");
                                        if (countMinus > 0) error("สรุปราคาประเมินขั้นต้นติดลบ");
                                        if (noAppraiReportCount > 0) error("ยังไม่ได้จัดทำเล่มประเมิน");
                                        setInActiveCommittee();
                                        //new CR -> new flow
                                        var orgNew = await this.db.APP_M_ORG_NEW.Where(o => o.ORG_ID == approveOrgId).FirstOrDefaultAsync();
                                        if (orgNew != null)
                                        {
                                            try
                                            {
                                                string size = "";
                                                var all_User = this.db.APP_USERS.Where(x => x.ORG_ID != null).ToList();
                                                var userIdsInUserModels = all_User.Select(user => user.USER_NAME).ToList();
                                                
                                                var all_Role_User = this.db.APP_ROLE_USERS.ToList();
                                                var center = this.db.APP_M_ORG_NEW.Where(x => x.ORG_ID == orgNew.ORG_PID).FirstOrDefault(); //ศูนย์
                                                var all_center = this.db.APP_M_ORG_NEW.Where(x => x.ORG_PID == center.ORG_PID).ToList(); //ศูนย์ทั้งหมดภายใต้ภาคเดียวกัน
                                                var all_center_ids = all_center.Select(s => s.ORG_ID).ToList();
                                                var userAllInCenter = all_User.Where(org => all_center_ids.Contains((int)org.ORG_ID)).ToList();
                                                List<AutoAssignCommittee> assignCommitteeUsers = new List<AutoAssignCommittee>();

                                                var app_Master = this.db.APP_MASTER_NEW_ORG.Where(x => x.L_TYPE == "COMMITTEE_SIZE").ToList();
                                                string XL_POWER_STR = app_Master.FirstOrDefault(x => x.L_NAME == "XL_POWER").L_VALUE;
                                                int? XL_POWER = !String.IsNullOrEmpty(XL_POWER_STR) ? Convert.ToInt32(XL_POWER_STR) : (int?)null;
                                                string XL_MIN_STR = app_Master.FirstOrDefault(x => x.L_NAME == "XL").L_VALUE;
                                                int? XL_MIN = !String.IsNullOrEmpty(XL_MIN_STR) ? Convert.ToInt32(XL_MIN_STR) : (int?)null;
                                                string L_MIN_STR = app_Master.FirstOrDefault(x => x.L_NAME == "L").L_VALUE;
                                                int? L_MIN = !String.IsNullOrEmpty(L_MIN_STR) ? Convert.ToInt32(L_MIN_STR) : (int?)null;
                                                string L_MAX_STR = app_Master.FirstOrDefault(x => x.L_NAME == "L").L_VALUE2;
                                                int? L_MAX = !String.IsNullOrEmpty(L_MAX_STR) ? Convert.ToInt32(L_MAX_STR) : (int?)null;
                                                string M_MIN_STR = app_Master.FirstOrDefault(x => x.L_NAME == "M").L_VALUE;
                                                int? M_MIN = !String.IsNullOrEmpty(M_MIN_STR) ? Convert.ToInt32(M_MIN_STR) : (int?)null;
                                                string M_MAX_STR = app_Master.FirstOrDefault(x => x.L_NAME == "M").L_VALUE2;
                                                int? M_MAX = !String.IsNullOrEmpty(M_MAX_STR) ? Convert.ToInt32(M_MAX_STR) : (int?)null;
                                                string S_MAX_STR = app_Master.FirstOrDefault(x => x.L_NAME == "S").L_VALUE2;
                                                int? S_MAX = !String.IsNullOrEmpty(S_MAX_STR) ? Convert.ToInt32(S_MAX_STR) : (int?)null;


                                                //เช็คอำนาจอนุมัติสินเชื่อ ???
                                                if (req.CREDIT_LIMIT > XL_POWER || apprai_amount > XL_MIN)
                                                {
                                                    //XL
                                                    size = "XL";
                                                    // get user role 451,452,453,454,455
                                                    List<APP_USERS> usercomm1 = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 451 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm1)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 451;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    List<APP_USERS> usercomm1_Spare = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 456 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm1_Spare)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 456;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    List<APP_USERS> usercomm2 = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 452 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm2)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 2;
                                                        tmp.ROLE_ID = 452;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    List<APP_USERS> usercomm3 = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 453 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm3)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 3;
                                                        tmp.ROLE_ID = 453;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    List<APP_USERS> usercomm4 = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 454 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm4)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 4;
                                                        tmp.ROLE_ID = 454;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    List<APP_USERS> usercomm5 = (from user in all_User
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 455 //&& user.USER_POSITION_LEVEL.ToUpper() == "CENTER"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm5)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 5;
                                                        tmp.ROLE_ID = 455;
                                                        tmp.JOB_SIZE = "XL";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                }
                                                else if (apprai_amount > L_MIN && apprai_amount <= L_MAX)
                                                {
                                                    //L
                                                    size = "L";
                                                    List<APP_USERS> usercomm1 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where user.ORG_ID == center.ORG_ID && role.ROLE_ID == 431 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "LEAD"
                                                                                 select user).ToList();
                                                    List<APP_USERS> usercomm1_H = (from user in all_User
                                                                                   join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                   where user.ORG_ID == center.ORG_PID && role.ROLE_ID == 441 //&& user.USER_POSITION_LEVEL.ToUpper() == "HEAD"
                                                                                   select user).ToList();
                                                    foreach (var user in usercomm1)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 431;
                                                        tmp.JOB_SIZE = "L";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                    foreach (var user in usercomm1_H)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 441;
                                                        tmp.JOB_SIZE = "L";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }


                                                    List<APP_USERS> usercomm2 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 432 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "LEAD"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm2)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 2;
                                                        tmp.ROLE_ID = 432;
                                                        tmp.JOB_SIZE = "L";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }

                                                    List<APP_USERS> usercomm3 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where user.ORG_ID == center.ORG_ID && role.ROLE_ID == 433 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm3)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 3;
                                                        tmp.ROLE_ID = 433;
                                                        tmp.JOB_SIZE = "L";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                }
                                                else if (apprai_amount > M_MIN && apprai_amount <= M_MAX)
                                                {
                                                    //M
                                                    size = "M";
                                                    List<APP_USERS> usercomm1 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where user.ORG_ID == center.ORG_ID && role.ROLE_ID == 431 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "LEAD"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm1)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 431;
                                                        tmp.JOB_SIZE = "M";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }


                                                    List<APP_USERS> usercomm2 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 432 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm2)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 2;
                                                        tmp.ROLE_ID = 432;
                                                        tmp.JOB_SIZE = "M";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }

                                                    List<APP_USERS> usercomm3 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 433 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm3)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 3;
                                                        tmp.ROLE_ID = 433;
                                                        tmp.JOB_SIZE = "M";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                }
                                                else if (apprai_amount <= S_MAX)
                                                {
                                                    //S
                                                    size = "S";
                                                    List<APP_USERS> usercomm1 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where user.ORG_ID == center.ORG_ID && role.ROLE_ID == 431 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();
                                                    foreach (var user in usercomm1)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 1;
                                                        tmp.ROLE_ID = 431;
                                                        tmp.JOB_SIZE = "S";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }


                                                    List<APP_USERS> usercomm2 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 432 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm2)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 2;
                                                        tmp.ROLE_ID = 432;
                                                        tmp.JOB_SIZE = "S";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }

                                                    List<APP_USERS> usercomm3 = (from user in userAllInCenter
                                                                                 join role in all_Role_User on user.USER_NAME equals role.ALLOW_USER
                                                                                 where role.ROLE_ID == 433 && (user.USER_POSITION_LEVEL ?? string.Empty).ToUpper() == "STAFF"
                                                                                 select user).ToList();

                                                    foreach (var user in usercomm3)
                                                    {
                                                        AutoAssignCommittee tmp = new AutoAssignCommittee();
                                                        tmp.REQUEST_ID = req.REQUEST_ID;
                                                        tmp.COMM = 3;
                                                        tmp.ROLE_ID = 433;
                                                        tmp.JOB_SIZE = "S";
                                                        tmp.USER_NAME = user.USER_NAME;
                                                        assignCommitteeUsers.Add(tmp);
                                                    }
                                                }

                                                if (assignCommitteeUsers.Any())
                                                {
                                                    var dis = assignCommitteeUsers.Select(o => o.COMM).Distinct();
                                                    requiredActor = dis.Count();
                                                    if ((size == "XL" && requiredActor != 5) || (size != "XL" && requiredActor != 3))
                                                    {
                                                        error("ตั้งค่าข้อมูลคณะกรรมการไม่ครบถ้วน");
                                                    }
                                                    addJobAssignCommittee(assignCommitteeUsers);
                                                }
                                                else
                                                    error("ไม่มีข้อมูลคณะกรรมการ");

                                            }
                                            catch 
                                            {
                                                error("Assign คณะกรรมการผิดพลาด");
                                            }
                                        }
                                        else //old flow
                                        {
                                            if (apprai_amount > maxProvinceApproveAmount)
                                            {
                                                approveOrgId = await db.APP_CONFIG.Where(s => s.CONFIG_ID == 1).Select(s => s.APPROV_ORG_ID).FirstOrDefaultAsync();

                                                requiredActor = 5;
                                            }
                                            else if (req.APPRAI_TYPE == 2)
                                            {
                                                approveOrgId = db.APP_M_PROVINCE.FirstOrDefault(s => s.PROVINCE_CODE == req.COL_PROVINCE)?.APPRAI_ORG_ID;
                                                if (approveOrgId == null) error("ยังไม่ได้กำหนดศูนย์ประเมินของจังหวัด");
                                            }
                                        }

                                        if (flowPreactionType == FlowPreactionType.Checkin)
                                        {
                                            var owner = await setOwner(4, approveOrgId);

                                            owner.REQUIRED_ACTOR = requiredActor;

                                            addColApprove(requiredActor);
                                            req.ROLE_4_INBOX = DateTime.Now;
                                            req.APPRAI_DATE = DateTime.Now;
                                            req.APPROVE_ORG_ID = approveOrgId;
                                        }

                                        //db.AAG_COL_APPROVE.RemoveRange(db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                                    }
                                    break;
                                case 41:
                                    {
                                        //var actRemain = db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.AMOUNT == null && s.ACTOR == rol.ACTOR).Count()
                                        // NOSONAR if (actRemain > 0) error("ยังบันทึกราคาไม่ครบทุกรายการ") //

                                        var reqActors = db.BPM_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID == 4).Select(s => s.REQUIRED_ACTOR).FirstOrDefault() ?? 1;
                                        var actions = db.BPM_ACTION.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STATE_ID == 41).ToList();
                                        var xx = actions.Where(s => s.FROM_STATE_ID == 33).OrderByDescending(s => s.ACTION_TIME).FirstOrDefault();

                                        var approved = db.BPM_ACTION.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.FROM_STATE_ID == 41 && s.ACTION_TIME > xx.ACTION_TIME).Select(s => s.USER_NAME).Distinct().ToList();
                                        var reqRemain = db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.AMOUNT == null).Count();
                                        var actRemain = db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.AMOUNT == null && s.ACTOR == rol.ACTOR).Count();

                                        var me = approved.FirstOrDefault(s => s == usr.USER_NAME);
                                        if (me != null) approved.Remove(me);
                                        // NOSONAR if (approved.Count + 1 >= reqActors) rms.StateId = toStates[1] //

                                        if (reqRemain == 0)
                                        {
                                            foreach (var col in db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                                            {
                                                req.APPROVE_REMARK = null;
                                                req.NOT_APPROVE_REMARK = null;
                                                req.APPROVE_ATTACH_PATH = null;
                                                req.APPROVE_ATTACH_DATE = null;
                                                req.E_BY = usr.USER_NAME;
                                                req.E_DATE = DateTime.Now;

                                                var minPrice = db.AAG_COL_APPROVE.Where(s => s.SUB_COL_ID == col.SUB_COL_ID && s.SUB_COL_TYPE == col.SUB_COL_TYPE).Min(s => s.AMOUNT);
                                                var maxPrice = db.AAG_COL_APPROVE.Where(s => s.SUB_COL_ID == col.SUB_COL_ID && s.SUB_COL_TYPE == col.SUB_COL_TYPE).Max(s => s.AMOUNT);
                                                if (minPrice == maxPrice)
                                                {
                                                    col.APPROVE_AMOUNT = maxPrice;
                                                }
                                                else
                                                {
                                                    col.APPROVE_AMOUNT = null;
                                                }
                                            }
                                        }
                                        if (req.COL_TYPE == 285011 && machineMortgageFlagDistinctCount() > 1)
                                        {
                                            error("การจดทะเบียนสิทธิและนิติกรรมต้องเหมือนกันทุกทรัพย์");
                                        }

                                        var lastActionToApprover = db.BPM_ACTION.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STATE_ID != s.FROM_STATE_ID).OrderByDescending(s => s.ACTION_ID).FirstOrDefault();

                                        var listApproverAction = db.BPM_ACTION.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STATE_ID == 41 && s.ACTION_ID > lastActionToApprover.ACTION_ID).ToList();

                                        var listApproveActor = listApproverAction.Select(s => s.ACTOR).ToList();
                                        listApproveActor.Add(rol.ACTOR);

                                        var owner = db.BPM_OWNER.FirstOrDefault(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID == 4);
                                        var actorList = listApproveActor.Distinct().ToList();

                                        if (actorList.Count >= owner?.REQUIRED_ACTOR) rms.StateId = toStates[1];

                                        var noApproveRemart = db.AAG_REQUEST_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.APPROV_REMARK == null && s.ACTOR == rol.ACTOR).ToList();

                                        var noApprovAmount = db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.AMOUNT == null && s.ACTOR == rol.ACTOR).ToList();

                                        var overApproveAmount = (
                                            from t in db.AAG_COL_APPROVE
                                            join a in db.AAG_COL_AMOUNT on new { t.REQUEST_ID, t.HEAD_COL_ID, t.SUB_COL_ID } equals new { a.REQUEST_ID, a.HEAD_COL_ID, a.SUB_COL_ID }
                                            where t.ACTOR == rol.ACTOR
                                                && t.REQUEST_ID == req.REQUEST_ID
                                                && t.AMOUNT > a.APPRAI_AMOUNT
                                            select t).ToList();

                                        if (noApproveRemart.Count > 0) error("ยังไม่ได้บันทึกความเห็นผู้อนุมัติ");

                                        if (noApprovAmount.Count > 0) error("ยังไม่ได้บันทึกราคาอนุมัติ");

                                        // NOSONAR if (overApproveAmount.Count > 0) error("ราคาอนุมัติมากกว่าราคาประเมิน") //
                                    }
                                    break;
                                case 42:
                                    {
                                        if (rol.ACTOR == 1)
                                        {
                                            //var isApproveAllCol = true
                                            //foreach (var h in db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == req.REQUEST_ID)) //
                                            //{ //
                                            //    foreach (var s in db.AAG_COL_AMOUNT.Where(s => s.HEAD_COL_ID == h.HEAD_COL_ID)) //
                                            //    { //
                                            //        NOSONAR if (s.APPROVE_AMOUNT == null) isApproveAllCol = false
                                            //    } //
                                            //} //
                                            // NOSONAR if (!isApproveAllCol) error("ยังบันทึกข้อมูลไม่ครบถ้วน") //

                                            var nullApprove = db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.APPROVE_AMOUNT == null).ToList();

                                            var hasApprove = db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.APPROVE_AMOUNT > 0).ToList();

                                            var headcol = await db.AAG_HEAD_COL.Where(s => s.REQUEST_ID == doc_id).OrderBy(s => s.HEAD_COL_ID).FirstOrDefaultAsync();
                                            if (nullApprove.Count() > 0) error("ยังไม่ได้บันทึกราคาอนุมัติ");
                                            else if (hasApprove.Count() == 0)
                                            {
                                                if (req.FLOW_ID != 2)
                                                {
                                                    req.FLOW_ID = 4;
                                                }

                                            }
                                            else
                                            {
                                                if(req.FLOW_ID == 4)
                                                {
                                                    req.FLOW_ID = 1;
                                                    if (req.REQUEST_GROUP == 210202)
                                                    {
                                                        req.FLOW_ID = 5;
                                                    }
                                                    else if (req.REQUEST_GROUP == 210203)
                                                    {
                                                        req.FLOW_ID = 6;
                                                    }
                                                    else if (req.REQUEST_TYPE == 2 && req.REQUEST_OBJECTIVE == 210102)
                                                    {
                                                        req.FLOW_ID = 2;
                                                    }
                                                    else if (headcol.BOT_COLTYPE_ID == 286007)
                                                    {
                                                        req.FLOW_ID = 3;
                                                    }
                                                }
                                            }
                                            if (hasApprove.Count > 0)
                                            {
                                                foreach (var approve in hasApprove)
                                                {
                                                    var subColApprove = db.AAG_COL_APPROVE.Where(s => s.REQUEST_ID == approve.REQUEST_ID && s.HEAD_COL_ID == approve.HEAD_COL_ID && s.SUB_COL_ID == approve.SUB_COL_ID).ToList();
                                                    if (subColApprove.Count > 0 && subColApprove.Any(s => s.AMOUNT != approve.APPROVE_AMOUNT))
                                                    {
                                                        error("คณะกรรมการมีการรับราคาต่างกันกรุณาตรวจสอบข้อมูล");
                                                        break;
                                                    }

                                                }

                                            }
                                            if (req.APPROVE_REMARK == null || req.NOT_APPROVE_REMARK == null) error("ยังไม่ได้บันทึกความเห็นผู้อนุมัติ");
                                            if (req.APPROVE_ATTACH_PATH == null) error("ยังไม่ได้จัดทำเอกสารสรุปการอนุมัติราคา");

                                            var mortgageOrgId = req.APPRAI_ORG_ID;

                                            if (req.APPRAI_TYPE == 2)
                                            {
                                                mortgageOrgId = db.APP_M_PROVINCE.FirstOrDefault(s => s.PROVINCE_CODE == req.COL_PROVINCE)?.APPRAI_ORG_ID;
                                                if (mortgageOrgId == null) error("ยังไม่ได้กำหนดศูนย์ประเมินของจังหวัด");
                                            }

                                            if (req.COL_TYPE == 285011)
                                            {
                                                var head = db.AAG_HEAD_COL.FirstOrDefault(s => s.REQUEST_ID == req.REQUEST_ID);
                                                var sub = db.AAG_COL_MACHINE.FirstOrDefault(s => s.HEAD_COL_ID == head.HEAD_COL_ID);
                                                if (sub?.MORTGAGE_FLAG == 1)
                                                {
                                                    mortgageOrgId = null; //ไปศูนย์นิติกรรมส่วนกลาง-หน่วยงาน สพป.
                                                }
                                            }

                                            req.MORTGAGE_ORG_ID = mortgageOrgId;
                                            req.ROLE_4_OUTBOX = DateTime.Now;
                                            if (req.APPROVE_DATE == null) error("ยังไม่ได้บันทึกวันที่รับราคา");
                                            if (rms.Messages.Count == 0)
                                            {
                                                foreach (var col in db.AAG_COL_AMOUNT.Where(s => s.REQUEST_ID == req.REQUEST_ID))
                                                {
                                                    col.APPROVE_ORG_ID = usr.ORG_ID;
                                                    col.APPROVE_USER_NAME = usr.USER_NAME;
                                                    col.APPROVE_DATE = req.APPROVE_DATE;
                                                }
                                                var getRole5 = db.APP_ROLES.Where(x => x.ROLE_ID >= 500 && x.ROLE_ID < 600 && x.VALID_THRU >= DateTime.Now).FirstOrDefault();
                                                if (getRole5 != null)
                                                {
                                                    if (rms.StateId == 100)
                                                    {
                                                        // NOSONAR
                                                    } // await setOwner(100, null)
                                                    else await setOwner(5, mortgageOrgId);
                                                }
                                                req.APPROVE_ORG_ID = usr.ORG_ID;
                                            }
                                        }
                                        else
                                        {
                                            error("เป็นสิทธิของผู้อนุมัติคนที่ 1 เท่านั้น");
                                        }
                                    }
                                    break;
                                case 51:
                                    {
                                        if (req.MORTGAGE_FEE_ATTACH_PATH == null) error("ยังไม่ได้จัดทำเอกสารค่าธรรมเนียม");
                                    }
                                    break;
                                case 52:
                                    {
                                        // NOSONAR
                                    }
                                    break;
                                case 53:
                                    {
                                        if (req.MORTGAGE_BY == 1) // สาขาจดทะเบียนนิติกรรม
                                        {
                                            if (req.FLOW_ID == 4) error("ต้องระบุผู้จดทะเบียนศูนย์เท่านั้น");
                                            else if (req.MORTGAGE_ORG_ID == null) error("ยังไม่ได้ระบุสาขาจดทะเบียนนิติกรรม");
                                            else
                                            {
                                                await setOwner(6, req.MORTGAGE_ORG_ID);

                                                rms.StateId = toStates[1];
                                            }
                                        }
                                    }
                                    break;
                                case 55:
                                case 65:
                                    {
                                        if (req.MORTGAGE_FEE_RECEIPT_ATTACH_PATH == null) error("ยังไม่ได้แนบใบเสร็จชำระค่าธรรมเนียม");
                                    }
                                    break;
                                case 56:
                                case 66:
                                    {
                                        // NOSONAR if (rms.StateId == 100) await setOwner(100, null) //
                                    }
                                    break;
                                case 57:
                                    {
                                        // NOSONAR
                                    }
                                    break;
                                case 59:
                                    {
                                        // INTERFACE
                                        //await setOwner(100, null)
                                    }
                                    break;
                                case 69:
                                    {
                                        // INTERFACE
                                        //await setOwner(100, null)
                                    }
                                    break;
                            }
                            return rms.Submit == 1;
                        }

                        async Task<bool> checkSignOwner()
                        {
                            //var data = ((from r in db.AAG_REQUEST
                            //                  join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                            //                  join l in db.AAG_COL_LAND on h.HEAD_COL_ID equals l.HEAD_COL_ID
                            //                  join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                            //                  where r.REQUEST_NO == req.REQUEST_NO
                            //                  select new
                            //                  { //
                            //                      r.REQUEST_NO,
                            //                      h.HEAD_COL_TYPE_ID,
                            //                      o.PIC_PATH
                            //                  }).Concat(
                            //                    from r in db.AAG_REQUEST
                            //                    join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                            //                    join l in db.AAG_COL_BUILD on h.HEAD_COL_ID equals l.HEAD_COL_ID
                            //                    join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                            //                    where r.REQUEST_NO == req.REQUEST_NO
                            //                    select new
                            //                    { //
                            //                        r.REQUEST_NO,
                            //                        h.HEAD_COL_TYPE_ID,
                            //                        o.PIC_PATH
                            //                    }).Concat(
                            //                    from r in db.AAG_REQUEST
                            //                    join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                            //                    join l in db.AAG_COL_CONDO on h.HEAD_COL_ID equals l.HEAD_COL_ID
                            //                    join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                            //                    where r.REQUEST_NO == req.REQUEST_NO
                            //                    select new
                            //                    { //
                            //                        r.REQUEST_NO,
                            //                        h.HEAD_COL_TYPE_ID,
                            //                        o.PIC_PATH
                            //                    }).Concat(
                            //                    from r in db.AAG_REQUEST
                            //                    join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                            //                    join l in db.AAG_COL_MACHINE on h.HEAD_COL_ID equals l.HEAD_COL_ID
                            //                    join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                            //                    where r.REQUEST_NO == req.REQUEST_NO
                            //                    select new
                            //                    { //
                            //                        r.REQUEST_NO,
                            //                        h.HEAD_COL_TYPE_ID,
                            //                        o.PIC_PATH
                            //                    }).Concat(
                            //                    from r in db.AAG_REQUEST
                            //                    join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                            //                    join l in db.AAG_COL_TREE_HEAD on h.HEAD_COL_ID equals l.HEAD_COL_ID
                            //                    join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                            //                    where r.REQUEST_NO == req.REQUEST_NO
                            //                    select new
                            //                    { //
                            //                        r.REQUEST_NO,
                            //                        h.HEAD_COL_TYPE_ID,
                            //                        o.PIC_PATH
                            //                    }))
                            var data = (
                                                from r in db.AAG_REQUEST
                                                join h in db.AAG_HEAD_COL on r.REQUEST_ID equals h.REQUEST_ID
                                                join l in db.AAG_COL_BUILD on h.HEAD_COL_ID equals l.HEAD_COL_ID
                                                join o in db.AAG_COL_OWNER on l.COL_OWNER equals o.L_VALUE
                                                where r.REQUEST_NO == req.REQUEST_NO
                                                select new
                                                {
                                                    r.REQUEST_NO,
                                                    h.HEAD_COL_TYPE_ID,
                                                    o.PIC_PATH
                                                });

                            if (await data.AnyAsync(x => x.PIC_PATH == null))
                            {
                                error($"ยังไม่มีลายเซ็นของผู้ถือกรรมสิทธิ์สิ่งปลูกสร้าง");
                            }

                            return rms.Submit == 1;
                        }

                        if (act.STATE_ID == fromState)
                        {
                            if (rms.StateId >= fromState)
                            {
                                if (await checkForm() && await checkFlow() && flowPreactionType == FlowPreactionType.Checkin)
                                {
                                    checkinState(rms.StateId);
                                    req.E_DATE = DateTime.Now;
                                    req.E_BY = usr.USER_NAME;
                                }
                            }
                            else
                            {
                                if (flowPreactionType == FlowPreactionType.Checkin)
                                {
                                    var step_id = db.BPM_STATE.FirstOrDefault(s => s.STATE_ID == rms.StateId)?.STEP_ID;
                                    db.BPM_OWNER.RemoveRange(db.BPM_OWNER.Where(s => s.REQUEST_ID == req.REQUEST_ID && s.STEP_ID > step_id));
                                    req.E_DATE = DateTime.Now;
                                    req.E_BY = usr.USER_NAME;
                                }
                            }
                        }
                        else error("รายการนี้ได้ถูกดำเนินการไปแล้ว");
                    }
                    break;
            }
            if (flowPreactionType == FlowPreactionType.Checkin && rms.Submit == 1)
            {
                db.SaveChanges();
            }
            return rms;
        }
    }
}
